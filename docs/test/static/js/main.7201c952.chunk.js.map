{"version":3,"sources":["ValueButton.js","SensorItem.js","SensorList.js","SensorScreen.js","App.js","serviceWorker.js","subscription.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","avatar","blue","color","tempColor","teal","humidityColor","indigo","uvColor","blueGrey","lumColor","pink","getColor","value","type","getUnitSign","epochToTime","epoch","d","Date","setUTCSeconds","toLocaleTimeString","ValueButton","sensor","React","useState","open","setOpen","handleClick","Button","variant","key","style","data","slice","reverse","onClick","Dialog","onClose","aria-labelledby","DialogTitle","id","name","List","map","entry","ListItem","button","ListItemText","primary","paddingTop","paddingBottom","SensorItem","sensors","classes","className","substring","length","secondary","moment","fromNow","display","flexDirection","array","size","as","collection","iteratee","a","SensorList","sensorData","console","log","items","Object","keys","sort","b","localeCompare","item","buttonColorFunc","SensorsScreen","props","groupBy","prop","reduce","groups","val","push","reloadData","done","fromDateTime","getTime","toDateTime","fetch","then","response","json","setState","series","lastUpdated","catch","error","state","this","Container","Component","navigationOptions","title","flexGrow","menuButton","marginRight","spacing","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","convertedVapidKey","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","urlBase64ToUint8Array","process","ReactDOM","render","anchorEl","setAnchorEl","handleClose","Fragment","CssBaseline","AppBar","position","Toolbar","IconButton","edge","aria-label","aria-controls","aria-haspopup","event","currentTarget","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","MenuItem","document","getElementById","URL","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","pushManager","getSubscription","existedSubscription","subscribe","applicationServerKey","userVisibleOnly","newSubscription","subscription","method","body","JSON","stringify","mode","e","Notification","permission"],"mappings":"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","file":"static/js/main.7201c952.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { blueGrey, pink, teal, indigo } from '@material-ui/core/colors';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport { blue } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 440,\n    backgroundColor: theme.palette.background.paper,\n  },\n  avatar: {\n    backgroundColor: blue[100],\n    color: blue[600],\n  },\n}));\n\nconst tempColor = teal[\"400\"];\nconst humidityColor = indigo[\"400\"];\nconst uvColor = blueGrey[\"400\"];\nconst lumColor = pink[\"400\"];\n\nconst getColor = (value, type) => {\n  switch (type) {\n    case 'temp': return tempColor;\n    case 'humidity': return humidityColor;\n    case 'uv': return uvColor;\n    case 'lum': return lumColor;\n  }\n}\n\nconst getUnitSign = (type) => {\n  switch (type) {\n    case \"temp\": return \"C\";\n    case \"humidity\": return \"%\";\n    case \"lum\": return \"L\";\n    case \"uv\": return \"UV\";\n    default: return \"N/A\";\n  }\n}\n\nconst epochToDateTime = (epoch) => {\n  const d = new Date(0);\n  d.setUTCSeconds(epoch / 1000);\n  return d.toLocaleDateString('sv-SE') + ' ' + d.toLocaleTimeString();\n}\n\nconst epochToTime = (epoch) => {\n  const d = new Date(0);\n  d.setUTCSeconds(epoch / 1000);\n  return d.toLocaleTimeString();\n}\n\nexport default function ValueButton({ sensor }) {\n\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <Button\n      variant=\"contained\"\n      key={sensor.type}\n      style={{ backgroundColor: getColor(sensor.data.slice().reverse()[0][1], sensor.type) }}\n      onClick={handleClick}\n    >{sensor.data.slice().reverse()[0][1] + getUnitSign(sensor.type)}\n      <Dialog onClose={handleClick} aria-labelledby=\"simple-dialog-title\" open={open}>\n        <DialogTitle id=\"simple-dialog-title\">{sensor.name + ' (' + sensor.type + ')'}</DialogTitle>\n        <List>\n          {sensor.data.map((entry) => (\n            <ListItem button onClick={handleClick}>\n              <ListItemText primary={epochToTime(entry[0])} />\n              <ListItemText primary={entry[1]} />\n            </ListItem>\n          ))}\n        </List>\n      </Dialog>\n    </Button>\n  )\n}","import React from 'react';\nimport moment from 'moment';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Chunk, Map } from 'react-lodash';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ValueButton from './ValueButton'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n}));\n\nexport default function SensorItem({ sensors }) {\n  const classes = useStyles();\n\n  return (\n    <ListItem className={classes.root}>\n      <ListItemText\n        primary={sensors[0].name.substring(0, 35) + (sensors[0].name.length > 35 ? \"...\" : \"\")}\n        secondary={moment(sensors[0].data.slice().reverse()[0][0]).fromNow()} />\n\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        <Chunk array={sensors} size={2}>\n          {as =>\n            <Map collection={as} iteratee={a =>\n              <div>\n                <Map collection={a} iteratee={sensor =>\n                  <ValueButton sensor={sensor} />\n                } />\n              </div>\n            } />\n          }\n        </Chunk>\n      </div>\n    </ListItem>\n\n  )\n}\n","import React from 'react';\n// import SensorsGraph from './SensorsGraph'\nimport SensorItem from './SensorItem'\nimport List from '@material-ui/core/List';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 440,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function SensorList({ sensorData }) {\n  // constructor(props) {\n  //   super(props);\n\n  //   setInterval(() => {this.forceUpdate();}, 60000);\n  //   this.state = {\n  //     selectedSensors: [],\n  //     reloading: false\n  //   }\n  // }\n\n  // render() {\n    // const selectedSensorsData = this.state.selectedSensors.map(key => {\n    //   var sensorid = key.split(':')[0];\n    //   var type = key.split(':')[1];\n    //   var sensor = this.props.sensorData.items[sensorid].filter(sensor => sensor.type === type)[0] ;\n    //   console.log('sensorid',sensorid);\n    //   console.log('sensor', sensor);\n    //   return {\n    //     data: sensor.data, \n    //     sensorid: sensor.sensorid, \n    //     type: sensor.type, \n    //     name: sensor.name + \"(\" + (sensor.type === 'temp' ? \"C\" : \"%\") + \")\"\n    //   }\n    // });\n\n    const classes = useStyles();\nconsole.log('hej', sensorData.items);\n    const items = Object.keys(sensorData.items)\n    .sort((a, b) => sensorData.items[a][0].name.localeCompare(sensorData.items[b][0].name));\n\n    return (\n      <List className={classes.root}>\n        {\n          items.map((item) =>\n            <SensorItem \n              sensors={sensorData.items[item]}\n              buttonColorFunc={(sensor) => '#0000FF'}\n            />\n          )\n        }\n      </List>\n      // <View style={{ flexDirection: 'row', flex: 1, alignItems: 'stretch' }}>\n      //   <FlatList data={Object.keys(this.props.sensorData.items)}\n      //             keyExtractor={item => item}\n      //             style={{ flexGrow: 1 }}\n      //             refreshing={this.state.reloading}\n      //             onRefresh={() => this.setState({reloading: true}, this.props.reloadData(() => this.setState({reloading:false})))}\n      //             renderItem={({item}) => \n      //     <SensorItem buttonColorFunc={(sensor) => this.state.selectedSensors.includes(sensor.sensorid + \":\" + sensor.type) ?\n      //                       '#FF0000' : '#0000FF'}\n      //         sensors={this.props.sensorData.items[item]} onPress={(sensor) => () =>\n      //           {\n      //             if (this.state.selectedSensors.includes(sensor.sensorid + \":\" + sensor.type)) {\n      //               var selectedSensors = this.state.selectedSensors.filter(i => i !== sensor.sensorid + \":\" + sensor.type);\n      //               this.setState({selectedSensors})\n      //             } else {\n      //               var sensors = this.state.selectedSensors.slice();\n      //               sensors.push(sensor.sensorid + \":\" + sensor.type);\n      //               this.setState({selectedSensors: sensors})\n      //             }\n      //           }\n      //         }\n      //       />\n      //     }\n      //   />\n      //   {selectedSensorsData.length > 0 &&\n      //     <SensorsGraph data={{sensorData: selectedSensorsData, lastUpdated: this.props.sensorData.lastUpdated}} \n      //                   reloadData={this.props.reloadData}/>\n      //   }\n      // </View>\n    )\n  // }\n}","import React from 'react';\nimport SensorList from './SensorList';\nimport Container from '@material-ui/core/Container';\n\nexport default class SensorsScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Sensors'\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      sensorData: {\n        items: [],\n        lastUpdated: new Date()\n      }\n    }\n  }\n\n  groupBy = (array, prop) => {\n    return array.reduce(function(groups, item) {\n      const val = item[prop]\n      groups[val] = groups[val] || []\n      groups[val].push(item)\n      return groups\n    }, {})\n  }\n\n  reloadData = (done, fromDateTime = new Date(new Date().getTime() - (6*3600*1000)), toDateTime = new Date()) => {\n    console.log('reloadData', fromDateTime, toDateTime);\n//    fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues?fromDateTime=${parseInt(fromDateTime.getTime()/1000,10)}&toDateTime=${parseInt(toDateTime.getTime()/1000,10)}`)\n    fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues?from=6`)\n    .then(response => response.json())\n    .then(json => this.setState({sensorData: {items: this.groupBy(json.series, 'sensorid'), lastUpdated: new Date()}}, done))\n    .catch((error) =>{\n      console.error('ERROR',error);\n      done();\n    });\n  }\n\n  componentDidMount() {\n    this.reloadData(() => {});\n  }\n\n  render() {\n    return (\n      <Container maxWidth=\"sm\">\n       {/* <Container> */}\n      {this.state.sensorData &&\n            <SensorList reloadData={this.reloadData} sensorData={this.state.sensorData}/>\n          }\n      </Container>\n    );\n  }\n}\n","import React from 'react';\nimport SensorScreen from './SensorScreen';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function App() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n    const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <div className={classes.root}>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <IconButton \n            edge=\"start\" \n            className={classes.menuButton} \n            color=\"inherit\" \n            aria-label=\"menu\" \n            aria-controls=\"menu-appbar\"\n            aria-haspopup=\"true\"\n            onClick={handleMenu}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Menu\n            id=\"menu-appbar\"\n            anchorEl={anchorEl}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            keepMounted\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            open={open}\n            onClose={handleClose}\n          >\n            <MenuItem onClick={handleClose}>Profile</MenuItem>\n            <MenuItem onClick={handleClose}>Notification Events</MenuItem>\n          </Menu>\n        </Toolbar>\n      </AppBar>\n      <Toolbar/>\n      </div>\n      <SensorScreen />\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swFileName = process.env.NODE_ENV === 'production' \n        ? 'service-worker.js' \n        : 'custom-sw.js'\n      const swUrl = `${process.env.PUBLIC_URL}/${swFileName}`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const convertedVapidKey = urlBase64ToUint8Array(process.env.REACT_APP_PUBLIC_VAPID_KEY)\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4)\n  // eslint-disable-next-line\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\")\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\nfunction sendSubscription(subscription) {\n  return fetch(`${process.env.REACT_APP_API_URL}/dev/subscription`, {\n    method: 'POST',\n    body: JSON.stringify(subscription),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    mode: 'no-cors'\n  })\n}\n\nexport function subscribeUser() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function(registration) {\n      if (!registration.pushManager) {\n        console.log('Push manager unavailable.')\n        return\n      }\n\n      registration.pushManager.getSubscription().then(function(existedSubscription) {\n        if (existedSubscription === null) {\n          console.log('No subscription detected, make a request.')\n          registration.pushManager.subscribe({\n            applicationServerKey: convertedVapidKey,\n            userVisibleOnly: true,\n          }).then(function(newSubscription) {\n            console.log('New subscription added.')\n            sendSubscription(newSubscription)\n          }).catch(function(e) {\n            if (Notification.permission !== 'granted') {\n              console.log('Permission was not granted.')\n            } else {\n              console.error('An error ocurred during the subscription process.', e)\n            }\n          })\n        } else {\n          console.log('Existed subscription detected.')\n        }\n      })\n    })\n      .catch(function(e) {\n        console.error('An error ocurred during Service Worker registration.', e)\n      })\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as subscription from './subscription';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\nsubscription.subscribeUser();\n"],"sourceRoot":""}