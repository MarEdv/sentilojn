{"version":3,"sources":["ValueButton.js","SensorItem.js","SensorList.js","utils/applogs.js","SensorScreen.js","NotificationEventsGroup.js","NotificationEventsMenuItem.js","ApplicationLogsMenuItem.js","MenuBar.js","serviceWorker.js","subscription.js","index.js","App.js"],"names":["tempColor","teal","humidityColor","indigo","uvColor","blueGrey","lumColor","pink","defaultColor","grey","getColor","value","type","getUnitSign","epochToTime","epoch","d","Date","setUTCSeconds","toLocaleTimeString","ValueButton","sensor","React","useState","open","setOpen","handleClick","Button","variant","key","style","backgroundColor","data","slice","reverse","maxWidth","onClick","Dialog","onClose","aria-labelledby","DialogTitle","id","name","List","map","entry","idx","ListItem","button","ListItemText","primary","useStyles","makeStyles","root","paddingTop","paddingBottom","SensorItem","sensors","classes","className","substring","length","secondary","moment","fromNow","display","flexDirection","array","size","chunks","chunk","collection","iteratee","theme","width","palette","background","paper","SensorList","sensorData","items","Object","keys","sort","a","b","localeCompare","item","getItem","localStorage","addLog","label","obj","logs","JSON","parse","push","message","newLogs","stringify","setItem","clear","groupBy","prop","reduce","groups","val","flexGrow","marginTop","marginBottom","padding","spacing","textAlign","color","text","fontSize","fontWeight","reloadData","setSensorData","fromDateTime","getTime","fetch","then","response","json","series","console","log","lastUpdated","catch","error","SensorsScreen","state","useEffect","Container","Grid","container","xs","sensorId","Paper","includes","optionLabels","options","NotificationEventsGroup","eventsList","handleClickEvents","snoozeFunction","setValue","radioGroupRef","useRef","openSnooze","setOpenSnooze","Fragment","Accordion","AccordionSummary","expandIcon","aria-controls","alignItems","timestamp","event","stopPropagation","onFocus","AccordionDetails","disableBackdropClick","disableEscapeKeyDown","onEntering","current","focus","DialogContent","dividers","RadioGroup","ref","aria-label","onChange","target","option","FormControlLabel","control","Radio","DialogActions","autoFocus","NotificationEventsMenuItem","notificationEvents","setNotifictionEvents","openEvents","setOpenEvents","hours","headers","method","body","snoozeUntil","MenuItem","fullWidth","ApplicationLogsMenuItem","openLogs","setOpenLogs","logrow","menuButton","marginRight","title","dialog2","minWidth","MenuBar","anchorEl","setAnchorEl","Boolean","handleClose","AppBar","position","Toolbar","IconButton","edge","aria-haspopup","currentTarget","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","convertedVapidKey","base64String","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","urlBase64ToUint8Array","process","ReactDOM","render","CssBaseline","document","getElementById","URL","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","pushManager","getSubscription","existedSubscription","subscribe","applicationServerKey","userVisibleOnly","newSubscription","subscription","mode","e","Notification","permission"],"mappings":"sVASMA,EAAYC,IAAK,KACjBC,EAAgBC,IAAO,KACvBC,EAAUC,IAAS,KACnBC,EAAWC,IAAK,KAChBC,EAAeC,IAAK,KAEpBC,EAAW,SAACC,EAAOC,GACvB,OAAQA,GACN,IAAK,OAAQ,OAAOZ,EACpB,IAAK,WAAY,OAAOE,EACxB,IAAK,KAAM,OAAOE,EAClB,IAAK,MAAO,OAAOE,EACnB,QAAS,OAAOE,IAIdK,EAAc,SAACD,GACnB,OAAQA,GACN,IAAK,OAAQ,MAAO,IACpB,IAAK,WAAY,MAAO,IACxB,IAAK,MAAO,MAAO,IACnB,IAAK,KAAM,MAAO,KAClB,QAAS,MAAO,QAUdE,EAAc,SAACC,GACnB,IAAMC,EAAI,IAAIC,KAAK,GAEnB,OADAD,EAAEE,cAAcH,EAAQ,KACjBC,EAAEG,sBAGI,SAASC,EAAT,GAAkC,IAAXC,EAAU,EAAVA,OAAU,EAEtBC,IAAMC,UAAS,GAFO,mBAEvCC,EAFuC,KAEjCC,EAFiC,KAIxCC,EAAc,WAClBD,GAASD,IAGX,OACE,kBAACG,EAAA,EAAD,CACEC,QAAQ,YACRC,IAAKR,EAAOT,KACZkB,MAAO,CAAEC,gBAAiBrB,EAASW,EAAOW,KAAKC,QAAQC,UAAU,GAAG,GAAIb,EAAOT,MAAOuB,SAAU,IAChGC,QAASV,GACTL,EAAOW,KAAKC,QAAQC,UAAU,GAAG,GAAKrB,EAAYQ,EAAOT,MACzD,kBAACyB,EAAA,EAAD,CAAQC,QAASZ,EAAaa,kBAAgB,sBAAsBf,KAAMA,GACxE,kBAACgB,EAAA,EAAD,CAAaC,GAAG,uBAAuBpB,EAAOqB,KAAO,KAAOrB,EAAOT,KAAO,KAC1E,kBAAC+B,EAAA,EAAD,KACGtB,EAAOW,KAAKY,KAAI,SAACC,EAAOC,GAAR,OACf,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACZ,QAASV,EAAaG,IAAKiB,GAC1C,kBAACG,EAAA,EAAD,CAAcC,QAASpC,EAAY+B,EAAM,MACzC,kBAACI,EAAA,EAAD,CAAcC,QAASL,EAAM,YC5D3C,IAAMM,EAAYC,aAAW,iBAAO,CAClCC,KAAM,CACJC,WAAY,EACZC,cAAe,OAIJ,SAASC,EAAT,GAAkC,IAAZC,EAAW,EAAXA,QAC7BC,EAAUP,IAEhB,OACE,kBAACJ,EAAA,EAAD,CAAUY,UAAWD,EAAQL,MAC3B,kBAACJ,EAAA,EAAD,CACEC,QAASO,EAAQ,GAAGf,KAAKkB,UAAU,EAAG,KAAOH,EAAQ,GAAGf,KAAKmB,OAAS,GAAK,MAAQ,IACnFC,UAAWC,IAAON,EAAQ,GAAGzB,KAAKC,QAAQC,UAAU,GAAG,IAAI8B,YAE7D,yBAAKlC,MAAO,CAAEmC,QAAS,OAAQC,cAAe,WAC5C,kBAAC,IAAD,CAAOC,MAAOV,EAASW,KAAM,IAC1B,SAAAC,GAAM,OACLA,EAAOzB,KAAI,SAAC0B,EAAOxB,GAAR,OACT,yBAAKjB,IAAKiB,GACR,kBAAC,IAAD,CAAKyB,WAAYD,EAAOE,SAAU,SAAAnD,GAAM,OACtC,kBAACD,EAAD,CAAaC,OAAQA,EAAQQ,IAAKR,EAAOT,mBCzB3D,IAAMuC,EAAYC,aAAW,SAACqB,GAAD,MAAY,CACvCpB,KAAM,CACJqB,MAAO,OACPvC,SAAU,IACVJ,gBAAiB0C,EAAME,QAAQC,WAAWC,WAI/B,SAASC,EAAT,GAAqC,IAAfC,EAAc,EAAdA,WAC3BrB,EAAUP,IACV6B,EAAQC,OAAOC,KAAKH,EAAWC,OAClCG,MAAK,SAACC,EAAGC,GAAJ,OAAUN,EAAWC,MAAMI,GAAG,GAAG1C,KAAK4C,cAAcP,EAAWC,MAAMK,GAAG,GAAG3C,SAEnF,OACE,kBAACC,EAAA,EAAD,CAAMgB,UAAWD,EAAQL,MAErB2B,EAAMpC,KAAI,SAAC2C,GAAD,OACR,kBAAC/B,EAAD,CACEC,QAASsB,EAAWC,MAAMO,GAC1B1D,IAAK0D,Q,aCxBnB,SAASC,IACL,IAAMD,EAAOE,aAAaD,QAAQ,QAClC,OAAa,OAATD,EACO,KAEAA,EAIR,SAASG,EAAOC,EAAOC,GAC1B,IAAML,EAAOC,IACPK,EAAOC,KAAKC,MAAMR,GAAQ,IAC5BK,EACAC,EAAKG,KAAK,CAACvD,GAAIoD,EAAKhC,OAAQoC,QAAQ,GAAD,OAAIN,EAAJ,aAAcC,KAEjDC,EAAKG,KAAK,CAACvD,GAAIoD,EAAKhC,OAAQoC,QAAQ,GAAD,OAAIN,KAE3C,IAAMO,EAAUJ,KAAKK,UAAUN,GAC/BJ,aAAaW,QAAQ,OAAQF,GAG1B,SAASL,IACZ,IAAMN,EAAOC,IACb,OAAOM,KAAKC,MAAMR,GAGf,SAASc,IACZZ,aAAaW,QAAQ,OAAQ,M,sBCjB3BE,EAAU,SAACnC,EAAOoC,GACtB,OAAOpC,EAAMqC,QAAO,SAAUC,EAAQlB,GACpC,IAAMmB,EAAMnB,EAAKgB,GAGjB,OAFAE,EAAOC,GAAOD,EAAOC,IAAQ,GAC7BD,EAAOC,GAAKV,KAAKT,GACVkB,IACN,KAGCtD,EAAYC,aAAW,SAACqB,GAAD,MAAY,CACvCpB,KAAM,CACJsD,SAAU,EACVxE,SAAU,IACVyE,UAAW,GACXC,aAAc,IAEhBhC,MAAO,CACLiC,QAASrC,EAAMsC,QAAQ,GACvBC,UAAW,SACXC,MAAOxC,EAAME,QAAQuC,KAAKpD,UAC1BqD,SAAU,GACVC,WAAY,SAIVC,EAAa,SAACC,GAA+G,IAAhGC,EAA+F,uDAAhF,IAAItG,MAAK,IAAIA,MAAOuG,UAAa,OAA+C,uDAAf,IAAIvG,KACrHyE,EAAO,aAAc6B,GAErBE,MAAM,kFACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ,IAAM5C,EAAQsB,EAAQsB,EAAKC,OAAQ,YACnCC,QAAQC,IAAI,aAAc/C,GAC1BsC,EAAc,CACZvC,WAAY,CACVC,QACAgD,YAAa,IAAI/G,WAItBgH,OAAM,SAACC,GACNJ,QAAQI,MAAM,QAASA,OAId,SAASC,IAAiB,IAAD,EACP7G,IAAMC,SAAS,CAC5CwD,WAAY,CACVC,MAAO,GACPgD,YAAa,IAAI/G,QAJiB,mBAC/BmH,EAD+B,KACxBd,EADwB,KAQtChG,IAAM+G,WAAU,WACdhB,EAAWC,KACV,IAEH,IAAM5D,EAAUP,IAEhB,OACE,kBAACmF,EAAA,EAAD,CAAWnG,SAAS,MAClB,yBAAKwB,UAAWD,EAAQL,MACtB,kBAACkF,EAAA,EAAD,CAAMC,WAAS,EAACzB,QAAS,GACvB,kBAACwB,EAAA,EAAD,CAAMhD,MAAI,EAACkD,GAAI,IACb,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACzB,QAAS,GACvB,kBAAC,IAAD,CAAKxC,WAAY,CAAC,WAAY,aAAc,aAAc,cAAeC,SAAU,SAAAkE,GAAQ,OACzF,kBAACH,EAAA,EAAD,CAAMhD,MAAI,EAACkD,GAAI,EAAG5G,IAAK6G,GACrB,kBAACC,EAAA,EAAD,CAAOhF,UAAWD,EAAQmB,OAAO,2BAAIuD,EAAMrD,WAAWC,MAAM0D,IAAaN,EAAMrD,WAAWC,MAAM0D,GAAU,GAAGhG,MAC3G,6BACE,kBAAC,IAAD,CAAK6B,WAAY6D,EAAMrD,WAAWC,MAAM0D,GAAWlE,SAAU,SAAAnD,GAAM,MACjE,CAAC,OAAQ,YAAYuH,SAASvH,EAAOT,MAAQ,kBAACQ,EAAD,CAAaC,OAAQA,EAAQQ,IAAKR,EAAOT,OAAW,gBAUlHwH,EAAMrD,YACL,kBAACD,EAAD,CAAYuC,WAAYA,EAAYtC,WAAYqD,EAAMrD,c,iNCvExD8D,GAAe,CACnB,EAAK,SACL,EAAK,UACL,EAAK,UACL,GAAM,YAEFC,GAAU,CAAC,IAAK,IAAK,IAAK,MAEjB,SAASC,GAAT,GAAqF,IAAlDC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,kBAAmBC,EAAkB,EAAlBA,eAEzEpI,EAAc,SAACC,GACnB,IAAMC,EAAI,IAAIC,KAAK,GAEnB,OADAD,EAAEE,cAAcH,EAAQ,KACjBC,EAAEG,sBALsF,EASvEG,IAAMC,SADd,KAR+E,mBAS1FZ,EAT0F,KASnFwI,EATmF,KAU3FC,EAAgB9H,IAAM+H,OAAO,MAV8D,EAW7D/H,IAAMC,UAAS,GAX8C,mBAW1F+H,EAX0F,KAW9EC,EAX8E,KAajGjI,IAAM+G,WAAU,WACTiB,GACHH,EAPc,OASf,CATe,IASHG,IAyBf,OACE,kBAAC,IAAME,SAAP,KACE,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,WAAY,kBAAC,KAAD,MACZC,gBAAc,UACdnH,GAAG,UAEH,kBAAC8F,EAAA,EAAD,CAAMC,WAAS,EAACzB,QAAS,EAAG8C,WAAW,UACrC,kBAACtB,EAAA,EAAD,CAAMhD,MAAI,EAACkD,GAAI,IACb,kBAACxF,EAAA,EAAD,CAAcC,QAAS8F,EAAW,GAAGtG,KAAMoB,UAAWhD,EAAY,aAAIkI,GAAY9G,UAAU,GAAG4H,cAEjG,kBAACvB,EAAA,EAAD,CAAMhD,MAAI,EAACkD,GAAI,GACb,kBAAC,KAAD,CACErG,QAAS,SAAC2H,GAAYA,EAAMC,kBApCxCT,GAAc,IAqCFU,QAAS,SAACF,GAAD,OAAWA,EAAMC,wBAKlC,kBAACE,GAAA,EAAD,KACE,kBAACvH,EAAA,EAAD,KACE,kBAAC,IAAD,CAAK4B,WAAYyE,EAAYxE,SAAU,SAAA3B,GAAK,OAC1C,kBAACE,EAAA,EAAD,CAAUC,QAAM,EAACZ,QAAS6G,EAAmBpH,IAAG,UAAKgB,EAAM6F,SAAX,YAAuB7F,EAAMiH,YAC3E,kBAAC7G,EAAA,EAAD,CAAca,UAAWhD,EAAY+B,EAAMiH,WAAY5G,QAASL,EAAMoD,iBAMhF,kBAAC5D,EAAA,EAAD,CACE8H,sBAAoB,EACpBC,sBAAoB,EACpBjI,SAAS,KACTkI,WArDiB,WACQ,MAAzBjB,EAAckB,SAChBlB,EAAckB,QAAQC,SAoDpBhI,kBAAgB,4BAChBf,KAAM8H,GAEN,kBAAC9G,EAAA,EAAD,CAAaC,GAAG,6BAAhB,cACA,kBAAC+H,GAAA,EAAD,CAAeC,UAAQ,GACrB,kBAACC,GAAA,EAAD,CACEC,IAAKvB,EACLwB,aAAW,aACXlI,KAAK,aACL/B,MAAOA,EACPkK,SAjDW,SAACd,GACpBZ,EAASY,EAAMe,OAAOnK,SAkDbmI,GAAQlG,KAAI,SAACmI,GAAD,OACX,kBAACC,GAAA,EAAD,CAAkBrK,MAAOoK,EAAQlJ,IAAKkJ,EAAQE,QAAS,kBAACC,GAAA,EAAD,MAAWvF,MAAOkD,GAAakC,UAI5F,kBAACI,GAAA,EAAD,KACE,kBAACxJ,EAAA,EAAD,CAAQyJ,WAAS,EAAChJ,QAlEL,WACnBmH,GAAc,IAiEiCtC,MAAM,WAA/C,UAGA,kBAACtF,EAAA,EAAD,CAAQS,QAjEC,WACfmH,GAAc,GACdL,EAAeF,EAAW,GAAGN,SAAU/H,IA+DNsG,MAAM,WAAjC,SCrHK,SAASoE,GAAT,GAAkD,IAAZ/I,EAAW,EAAXA,QAAW,EAEXhB,IAAMC,SAAS,IAFJ,mBAEvD+J,EAFuD,KAEnCC,EAFmC,OAG1BjK,IAAMC,UAAS,GAHW,mBAGvDiK,EAHuD,KAG3CC,EAH2C,KAKxDxC,EAAoB,WACxBwC,GAAc,GACdnJ,KAmBFhB,IAAM+G,WAAU,YAhBG,SAACkD,GAClB7F,EAAO,cACP+B,MAAM,sFACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ2D,EAAqB3D,MAEtBK,OAAM,SAACC,GACNJ,QAAQI,MAAM,QAASA,MAS3Bb,CAAWkE,KACV,IAEH,IAAMrC,EAAiB,SAACR,EAAUgD,GAC9BhG,EAAO,mBAAoBgD,GAC3BjB,MAAM,qEAAD,OAAsEiB,GACzE,CACEiD,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,OAAQ,QACRC,KAAM/F,KAAKK,UAAU,CAAE2F,aAAa,IAAI7K,MAAOuG,UAAa,IAAOkE,EAAQ,GAAK,OAGjFhE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJlC,EAAO,UAAWkC,MAEnBK,OAAM,SAACC,GACNJ,QAAQI,MAAM,QAASA,OAI/B,OACE,kBAAC,IAAMsB,SAAP,KACE,kBAACuC,GAAA,EAAD,CAAU3J,QA/BW,WACvBqJ,GAAc,KA8BZ,uBAGA,kBAACpJ,EAAA,EAAD,CAAQC,QAAS2G,EAAmB1G,kBAAgB,sBAAsBf,KAAMgK,EAAYQ,WAAW,EAAM7J,SAAU,MACrH,kBAACK,EAAA,EAAD,CAAaC,GAAG,uBAAhB,uBACA,kBAACE,EAAA,EAAD,KACE,kBAAC,IAAD,CAAS4B,WAAY+G,EAAoB9G,SAAU,SAAC3B,GAAD,OAAWA,EAAM6F,YACjE,SAAC/H,GAAD,OACC,kBAAC,IAAD,CAAK4D,WAAYU,OAAOC,KAAKvE,GAAQ6D,SAAU,SAAA3C,GAAG,OAChD,kBAACkH,GAAD,CACEC,WAAYrI,EAAMkB,GAClBoH,kBAAmBA,EACnBpH,IAAKA,EACLqH,eAAgBA,a,yBC7DnB,SAAS+C,GAAT,GAA+C,IAAZ3J,EAAW,EAAXA,QAAW,EAE3BhB,IAAMC,UAAS,GAFY,mBAEpD2K,EAFoD,KAE1CC,EAF0C,KAc3D,OACE,kBAAC,IAAM3C,SAAP,KACE,kBAACuC,GAAA,EAAD,CAAU3J,QAPS,WACrB+J,GAAY,KAMV,oBAGA,kBAAC9J,EAAA,EAAD,CAAQC,QAfY,WACtB6J,GAAY,GACZ7J,KAaoCC,kBAAgB,sBAAsBf,KAAM0K,EAAUF,WAAW,EAAM7J,SAAU,MACjH,kBAACK,EAAA,EAAD,CAAaC,GAAG,uBAAhB,mBAEE,kBAAC,KAAD,CAAOL,QAASiE,KAElB,kBAAC1D,EAAA,EAAD,KACE,kBAAC,IAAD,CAAK4B,WAAYsB,IAAQrB,SAAU,SAAA4H,GAAM,OACvC,kBAACrJ,EAAA,EAAD,CAAUlB,IAAKuK,EAAO3J,IACpB,kBAACQ,EAAA,EAAD,CAAcC,QAASkJ,EAAOnG,SAAWmG,WC5BvD,IAAMjJ,GAAYC,aAAW,SAACqB,GAAD,MAAY,CACvCpB,KAAM,CACJsD,SAAU,GAEZ0F,WAAY,CACVC,YAAa7H,EAAMsC,QAAQ,IAE7BwF,MAAO,CACL5F,SAAU,GAEZ6F,QAAS,CACPC,SAAU,aAIC,SAASC,KAEtB,IAAMhJ,EAAUP,KAFgB,EAGA7B,IAAMC,SAAS,MAHf,mBAGzBoL,EAHyB,KAGfC,EAHe,KAI1BpL,EAAOqL,QAAQF,GAOfG,EAAc,WAClBF,EAAY,MACZlH,EAAO,gBAGT,OACE,kBAAC,IAAM8D,SAAP,KACE,kBAACuD,EAAA,EAAD,CAAQC,SAAS,QAAQrJ,UAAWD,EAAQL,MAC1C,kBAAC4J,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLxJ,UAAWD,EAAQ2I,WACnBpF,MAAM,UACN2D,aAAW,OACXhB,gBAAc,cACdwD,gBAAc,OACdhL,QArBS,SAAC2H,GAClB6C,EAAY7C,EAAMsD,eAClB3H,EAAO,gBAqBC,kBAAC,IAAD,OAEF,kBAAC,IAAD,CACEjD,GAAG,cACHkK,SAAUA,EACVW,aAAc,CACZC,SAAU,MACVC,WAAY,QAEdC,aAAW,EACXC,gBAAiB,CACfH,SAAU,MACVC,WAAY,QAEdhM,KAAMA,EACNc,QAASwK,GAET,6BACE,kBAACzB,GAAD,CAA4B/I,QAASwK,KAEvC,6BACE,kBAACb,GAAD,CAAyB3J,QAASwK,QAK1C,kBAACG,EAAA,EAAD,OCrEN,IAAMU,GAAcd,QACW,cAA7Be,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAwCN,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTvG,MAAK,SAAA4G,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpG,QACf+F,UAAUC,cAAcO,YAI1BjJ,EACE,iHAKEwI,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB5I,EAAO,sCAGHwI,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BrG,OAAM,SAAAC,GACLJ,QAAQI,MAAM,4CAA6CA,MCnGjE,IAAM4G,GAEN,SAA+BC,GAQ7B,IAPA,IAAMjI,EAAU,IAAIkI,QAAQ,EAAID,EAAalL,OAAS,GAAK,GAErDoL,GAAUF,EAAejI,GAASoI,QAAQ,MAAO,KAAKA,QAAQ,KAAM,KAEpEC,EAAUvB,OAAOwB,KAAKH,GACtBI,EAAc,IAAIC,WAAWH,EAAQtL,QAElC0L,EAAI,EAAGA,EAAIJ,EAAQtL,SAAU0L,EACpCF,EAAYE,GAAKJ,EAAQK,WAAWD,GAEtC,OAAOF,EAbiBI,CAAsBC,2FCKhDC,IAASC,OAAO,mBCDD,WAEb,OACE,kBAAC,IAAMpG,SAAP,KACE,kBAACqG,EAAA,EAAD,MACA,kBAACnD,GAAD,MACA,kBAAC,EAAD,SDLU,MAASoD,SAASC,eAAe,SFkB1C,SAAkB7B,GACvB,GAAI,kBAAmBC,UAAW,CAGhC,GADkB,IAAI6B,IAAIN,kBAAwB9B,OAAOC,SAASoC,MACpDC,SAAWtC,OAAOC,SAASqC,OAIvC,OAGFtC,OAAOuC,iBAAiB,QAAQ,WAC9B,IAGMlC,EAAK,UAAMyB,kBAAN,YAFP,qBAGA/B,KAgEV,SAAiCM,EAAOC,GAEtCzG,MAAMwG,EAAO,CACXtC,QAAS,CAAE,iBAAkB,YAE5BjE,MAAK,SAAAC,GAEJ,IAAMyI,EAAczI,EAASgE,QAAQ0E,IAAI,gBAEnB,MAApB1I,EAAS2I,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpC,UAAUC,cAAcoC,MAAM9I,MAAK,SAAA4G,GACjCA,EAAamC,aAAa/I,MAAK,WAC7BkG,OAAOC,SAAS6C,eAKpB1C,GAAgBC,EAAOC,MAG1BjG,OAAM,WACLvC,EACE,oEAvFAiL,CAAwB1C,EAAOC,GAI/BC,UAAUC,cAAcoC,MAAM9I,MAAK,WACjChC,EACE,iHAMJsI,GAAgBC,EAAOC,OE3C/BE,GDkBM,kBAAmBD,WACrBA,UAAUC,cAAcoC,MAAM9I,MAAK,SAAS4G,GACrCA,EAAasC,YAKlBtC,EAAasC,YAAYC,kBAAkBnJ,MAAK,SAASoJ,GAC3B,OAAxBA,GACFpL,EAAO,6CACP4I,EAAasC,YAAYG,UAAU,CACjCC,qBAAsBlC,GACtBmC,iBAAiB,IAChBvJ,MAAK,SAASwJ,GAzB3B,IAA0BC,EA0BdzL,EAAO,2BA1BOyL,EA2BGD,EA1BpBzJ,MAAM,GAAD,OAAIiI,yDAAJ,qBAAsD,CAChE9D,OAAQ,OACRC,KAAM/F,KAAKK,UAAUgL,GACrBxF,QAAS,CACP,eAAgB,oBAElByF,KAAM,eAqBGnJ,OAAM,SAASoJ,GACgB,YAA5BC,aAAaC,WACf7L,EAAO,+BAEPoC,QAAQI,MAAM,oDAAqDmJ,OAIvE3L,EAAO,qCArBTA,EAAO,gCAyBRuC,OAAM,SAASoJ,GACdvJ,QAAQI,MAAM,uDAAwDmJ,Q","file":"static/js/main.092979db.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { blueGrey, pink, teal, indigo, grey } from '@material-ui/core/colors';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\n\nconst tempColor = teal[\"400\"];\nconst humidityColor = indigo[\"400\"];\nconst uvColor = blueGrey[\"400\"];\nconst lumColor = pink[\"400\"];\nconst defaultColor = grey[\"400\"];\n\nconst getColor = (value, type) => {\n  switch (type) {\n    case 'temp': return tempColor;\n    case 'humidity': return humidityColor;\n    case 'uv': return uvColor;\n    case 'lum': return lumColor;\n    default: return defaultColor;\n  }\n}\n\nconst getUnitSign = (type) => {\n  switch (type) {\n    case \"temp\": return \"C\";\n    case \"humidity\": return \"%\";\n    case \"lum\": return \"L\";\n    case \"uv\": return \"UV\";\n    default: return \"N/A\";\n  }\n}\n\n// const epochToDateTime = (epoch) => {\n//   const d = new Date(0);\n//   d.setUTCSeconds(epoch / 1000);\n//   return d.toLocaleDateString('sv-SE') + ' ' + d.toLocaleTimeString();\n// }\n\nconst epochToTime = (epoch) => {\n  const d = new Date(0);\n  d.setUTCSeconds(epoch / 1000);\n  return d.toLocaleTimeString();\n}\n\nexport default function ValueButton({ sensor }) {\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <Button\n      variant=\"contained\"\n      key={sensor.type}\n      style={{ backgroundColor: getColor(sensor.data.slice().reverse()[0][1], sensor.type), maxWidth: 64 }}\n      onClick={handleClick}\n    >{sensor.data.slice().reverse()[0][1] + getUnitSign(sensor.type)}\n      <Dialog onClose={handleClick} aria-labelledby=\"simple-dialog-title\" open={open}>\n        <DialogTitle id=\"simple-dialog-title\">{sensor.name + ' (' + sensor.type + ')'}</DialogTitle>\n        <List>\n          {sensor.data.map((entry, idx) => (\n            <ListItem button onClick={handleClick} key={idx}>\n              <ListItemText primary={epochToTime(entry[0])} />\n              <ListItemText primary={entry[1]} />\n            </ListItem>\n          ))}\n        </List>\n      </Dialog>\n    </Button>\n  )\n}","import React from 'react';\nimport moment from 'moment';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Chunk, Map } from 'react-lodash';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ValueButton from './ValueButton'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n}));\n\nexport default function SensorItem({ sensors }) {\n  const classes = useStyles();\n\n  return (\n    <ListItem className={classes.root}>\n      <ListItemText\n        primary={sensors[0].name.substring(0, 35) + (sensors[0].name.length > 35 ? \"...\" : \"\")}\n        secondary={moment(sensors[0].data.slice().reverse()[0][0]).fromNow()} />\n\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        <Chunk array={sensors} size={2}>\n          {chunks =>\n            chunks.map((chunk, idx) =>\n              <div key={idx}>\n                <Map collection={chunk} iteratee={sensor =>\n                  <ValueButton sensor={sensor} key={sensor.type} />\n                } />\n              </div>\n            )\n          }\n        </Chunk>\n      </div>\n    </ListItem>\n  )\n}\n","import React from 'react';\nimport SensorItem from './SensorItem'\nimport List from '@material-ui/core/List';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 440,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function SensorList({ sensorData }) {\n    const classes = useStyles();\n    const items = Object.keys(sensorData.items)\n      .sort((a, b) => sensorData.items[a][0].name.localeCompare(sensorData.items[b][0].name));\n\n    return (\n      <List className={classes.root}>\n        {\n          items.map((item) =>\n            <SensorItem \n              sensors={sensorData.items[item]}\n              key={item}\n            />\n          )\n        }\n      </List>\n   )\n}","function getItem() {\n    const item = localStorage.getItem('logs');\n    if (item === null) {\n        return '[]';\n    } else {\n        return item;\n    }\n}\n\nexport function addLog(label, obj) {\n    const item = getItem();\n    const logs = JSON.parse(item || []);\n    if (obj) {\n        logs.push({id: logs.length, message:`${label}: ${obj}`});\n    } else {\n        logs.push({id: logs.length, message:`${label}`});\n    }\n    const newLogs = JSON.stringify(logs);\n    localStorage.setItem('logs', newLogs);\n}\n\nexport function logs() {\n    const item = getItem();\n    return JSON.parse(item);\n}\n\nexport function clear() {\n    localStorage.setItem('logs', '[]');\n}","import React from 'react';\nimport SensorList from './SensorList';\nimport Container from '@material-ui/core/Container';\nimport { addLog } from './utils/applogs';\nimport Grid from '@material-ui/core/Grid';\nimport ValueButton from './ValueButton';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Map } from 'react-lodash';\n\nconst groupBy = (array, prop) => {\n  return array.reduce(function (groups, item) {\n    const val = item[prop]\n    groups[val] = groups[val] || []\n    groups[val].push(item)\n    return groups\n  }, {})\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    maxWidth: 440,\n    marginTop: 10,\n    marginBottom: 10\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    fontSize: 16,\n    fontWeight: 700\n  },\n}));\n\nconst reloadData = (setSensorData, fromDateTime = new Date(new Date().getTime() - (6 * 3600 * 1000)), toDateTime = new Date()) => {\n  addLog('reloadData', fromDateTime, toDateTime);\n  //    fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues?fromDateTime=${parseInt(fromDateTime.getTime()/1000,10)}&toDateTime=${parseInt(toDateTime.getTime()/1000,10)}`)\n  fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues?from=6`)\n    .then(response => response.json())\n    .then(json => {\n      const items = groupBy(json.series, 'sensorid');\n      console.log('reloadData', items);\n      setSensorData({\n        sensorData: {\n          items,\n          lastUpdated: new Date()\n        }\n      });\n    })\n    .catch((error) => {\n      console.error('ERROR', error);\n    });\n}\n\nexport default function SensorsScreen() {\n  const [state, setSensorData] = React.useState({\n    sensorData: {\n      items: [],\n      lastUpdated: new Date()\n    }\n  });\n\n  React.useEffect(() => {\n    reloadData(setSensorData);\n  }, []);\n\n  const classes = useStyles();\n\n  return (\n    <Container maxWidth=\"sm\">\n      <div className={classes.root}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Grid container spacing={1}>\n              <Map collection={[\"14520232\", \"1525834634\", \"1525834644\", \"1525834649\"]} iteratee={sensorId =>\n                <Grid item xs={6} key={sensorId}>\n                  <Paper className={classes.paper}><p>{state.sensorData.items[sensorId] && state.sensorData.items[sensorId][0].name}</p>\n                    <div>\n                      <Map collection={state.sensorData.items[sensorId]} iteratee={sensor =>\n                        ['temp', 'humidity'].includes(sensor.type) ? <ValueButton sensor={sensor} key={sensor.type} /> : ''\n                      } />\n                    </div>\n                  </Paper>\n                </Grid>\n              } />\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n      {state.sensorData &&\n        <SensorList reloadData={reloadData} sensorData={state.sensorData} />\n      }\n    </Container>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Map } from 'react-lodash';\nimport SnoozeIcon from '@material-ui/icons/Snooze';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst optionLabels = {\n  '1': '1 hour',\n  '2': '2 hours',\n  '4': '4 hours',\n  '24': '24 hours'\n}\nconst options = ['1', '2', '4', '24'];\n\nexport default function NotificationEventsGroup({ eventsList, handleClickEvents, snoozeFunction }) {\n\n  const epochToTime = (epoch) => {\n    const d = new Date(0);\n    d.setUTCSeconds(epoch / 1000);\n    return d.toLocaleTimeString();\n  }\n\n  const valueProp = '1';\n  const [value, setValue] = React.useState(valueProp);\n  const radioGroupRef = React.useRef(null);\n  const [openSnooze, setOpenSnooze] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!openSnooze) {\n      setValue(valueProp);\n    }\n  }, [valueProp, openSnooze]);\n\n  const handleSnooze = () => {\n    setOpenSnooze(true);\n  }\n\n  const handleEntering = () => {\n    if (radioGroupRef.current != null) {\n      radioGroupRef.current.focus();\n    }\n  };\n\n  const handleCancel = () => {\n    setOpenSnooze(false);\n  };\n\n  const handleOk = () => {\n    setOpenSnooze(false);\n    snoozeFunction(eventsList[0].sensorId, value);\n  };\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <React.Fragment>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"content\"\n          id=\"header\"\n        >\n          <Grid container spacing={0} alignItems=\"center\">\n            <Grid item xs={11}>\n              <ListItemText primary={eventsList[0].name} secondary={epochToTime([...eventsList].reverse()[0].timestamp)} />\n            </Grid>\n            <Grid item xs={1}>\n              <SnoozeIcon\n                onClick={(event) => { event.stopPropagation(); handleSnooze(); }}\n                onFocus={(event) => event.stopPropagation()}\n              />\n            </Grid>\n          </Grid>\n        </AccordionSummary>\n        <AccordionDetails>\n          <List>\n            <Map collection={eventsList} iteratee={entry =>\n              <ListItem button onClick={handleClickEvents} key={`${entry.sensorId}-${entry.timestamp}`}>\n                <ListItemText secondary={epochToTime(entry.timestamp)} primary={entry.message} />\n              </ListItem>\n            } />\n          </List>\n        </AccordionDetails>\n      </Accordion>\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        maxWidth=\"xs\"\n        onEntering={handleEntering}\n        aria-labelledby=\"confirmation-dialog-title\"\n        open={openSnooze}\n      >\n        <DialogTitle id=\"confirmation-dialog-title\">Snooze For</DialogTitle>\n        <DialogContent dividers>\n          <RadioGroup\n            ref={radioGroupRef}\n            aria-label=\"snooze-for\"\n            name=\"snooze-for\"\n            value={value}\n            onChange={handleChange}\n          >\n            {options.map((option) => (\n              <FormControlLabel value={option} key={option} control={<Radio />} label={optionLabels[option]} />\n            ))}\n          </RadioGroup>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleCancel} color=\"primary\">\n            Cancel\n        </Button>\n          <Button onClick={handleOk} color=\"primary\">\n            Ok\n        </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  )\n}","import React from 'react';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport List from '@material-ui/core/List';\nimport { Map, GroupBy } from 'react-lodash';\nimport { addLog } from './utils/applogs';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport NotificationEventsGroup from './NotificationEventsGroup';\n\nexport default function NotificationEventsMenuItem({ onClose }) {\n\n  const [notificationEvents, setNotifictionEvents] = React.useState([]);\n  const [openEvents, setOpenEvents] = React.useState(false);\n\n  const handleClickEvents = () => {\n    setOpenEvents(false);\n    onClose();\n  };\n\n  const reloadData = (setNotifictionEvents) => {\n    addLog('reloadData');\n    fetch(`https://aoq53tdls8.execute-api.us-east-1.amazonaws.com/dev/sensorNotificationEvent`)\n      .then(response => response.json())\n      .then(json => {\n        setNotifictionEvents(json);\n      })\n      .catch((error) => {\n        console.error('ERROR', error);\n      });\n  }\n\n  const handleOpenEvents = () => {\n    setOpenEvents(true);\n  };\n\n  React.useEffect(() => {\n    reloadData(setNotifictionEvents);\n  }, []);\n\n  const snoozeFunction = (sensorId, hours) => {\n      addLog('snoozeFunction: ', sensorId);\n      fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensor/${sensorId}`,\n        {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          method: 'PATCH',\n          body: JSON.stringify({ snoozeUntil: new Date().getTime() + (1000 * hours * 60 * 60) })\n        }\n      )\n        .then(response => response.json())\n        .then(json => {\n          addLog('Success', json);\n        })\n        .catch((error) => {\n          console.error('ERROR', error);\n        });\n    };\n\n  return (\n    <React.Fragment>\n      <MenuItem onClick={handleOpenEvents}>\n        Notification Events\n      </MenuItem>\n      <Dialog onClose={handleClickEvents} aria-labelledby=\"simple-dialog-title\" open={openEvents} fullWidth={true} maxWidth={'xs'}>\n        <DialogTitle id=\"simple-dialog-title\">Notification Events</DialogTitle>\n        <List>\n          <GroupBy collection={notificationEvents} iteratee={(entry) => entry.sensorId}>\n            {(value) =>\n              <Map collection={Object.keys(value)} iteratee={key =>\n                <NotificationEventsGroup\n                  eventsList={value[key]}\n                  handleClickEvents={handleClickEvents}\n                  key={key}\n                  snoozeFunction={snoozeFunction}\n                />\n              } />\n            }\n          </GroupBy>\n        </List>\n      </Dialog>\n    </React.Fragment>\n  )\n}","import React from 'react';\n\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport List from '@material-ui/core/List';\nimport { Map } from 'react-lodash';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { logs, clear } from './utils/applogs';\nimport Clear from '@material-ui/icons/Clear';\n\nexport default function ApplicationLogsMenuItem({ onClose }) {\n\n  const [openLogs, setOpenLogs] = React.useState(false);\n\n  const handleClickLogs = () => {\n    setOpenLogs(false);\n    onClose();\n  };\n\n  const handleOpenLogs = () => {\n    setOpenLogs(true);\n  };\n\n\n  return (\n    <React.Fragment>\n      <MenuItem onClick={handleOpenLogs}>\n        Application Logs\n      </MenuItem>\n      <Dialog onClose={handleClickLogs} aria-labelledby=\"simple-dialog-title\" open={openLogs} fullWidth={true} maxWidth={'xs'}>\n        <DialogTitle id=\"simple-dialog-title\">\n          Application Logs\n          <Clear onClick={clear}></Clear>\n        </DialogTitle>\n        <List>\n          <Map collection={logs()} iteratee={logrow =>\n            <ListItem key={logrow.id}>\n              <ListItemText primary={logrow.message || logrow} />\n            </ListItem>\n          } />\n        </List>\n      </Dialog>\n    </React.Fragment>\n  )\n}","import React from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport NotificationEventsMenuItem from './NotificationEventsMenuItem';\nimport ApplicationLogsMenuItem from './ApplicationLogsMenuItem';\nimport { addLog } from './utils/applogs';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  dialog2: {\n    minWidth: \"400px\"\n  }\n}));\n\nexport default function MenuBar() {\n\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n    addLog('handleMenu');\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n    addLog('handleClose');\n  };\n\n  return (\n    <React.Fragment>\n      <AppBar position=\"fixed\" className={classes.root}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            aria-controls=\"menu-appbar\"\n            aria-haspopup=\"true\"\n            onClick={handleMenu}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Menu\n            id=\"menu-appbar\"\n            anchorEl={anchorEl}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            keepMounted\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            open={open}\n            onClose={handleClose}\n          >\n            <div>\n              <NotificationEventsMenuItem onClose={handleClose} />\n            </div>\n            <div>\n              <ApplicationLogsMenuItem onClose={handleClose} />\n            </div>\n          </Menu>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n    </React.Fragment>\n  )\n}","import { addLog } from './utils/applogs';\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swFileName = process.env.NODE_ENV === 'production' \n        ? 'service-worker.js' \n        : 'custom-sw.js'\n      const swUrl = `${process.env.PUBLIC_URL}/${swFileName}`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          addLog(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              addLog(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              addLog('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      addLog(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { addLog } from './utils/applogs';\nconst convertedVapidKey = urlBase64ToUint8Array(process.env.REACT_APP_PUBLIC_VAPID_KEY)\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4)\n  // eslint-disable-next-line\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\")\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\nfunction sendSubscription(subscription) {\n  return fetch(`${process.env.REACT_APP_API_URL}/dev/subscription`, {\n    method: 'POST',\n    body: JSON.stringify(subscription),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    mode: 'no-cors'\n  })\n}\n\nexport function subscribeUser() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function(registration) {\n      if (!registration.pushManager) {\n        addLog('Push manager unavailable.')\n        return\n      }\n\n      registration.pushManager.getSubscription().then(function(existedSubscription) {\n        if (existedSubscription === null) {\n          addLog('No subscription detected, make a request.')\n          registration.pushManager.subscribe({\n            applicationServerKey: convertedVapidKey,\n            userVisibleOnly: true,\n          }).then(function(newSubscription) {\n            addLog('New subscription added.')\n            sendSubscription(newSubscription)\n          }).catch(function(e) {\n            if (Notification.permission !== 'granted') {\n              addLog('Permission was not granted.')\n            } else {\n              console.error('An error ocurred during the subscription process.', e)\n            }\n          })\n        } else {\n          addLog('Existed subscription detected.')\n        }\n      })\n    })\n      .catch(function(e) {\n        console.error('An error ocurred during Service Worker registration.', e)\n      })\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as subscription from './subscription';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\nsubscription.subscribeUser();\n","import React from 'react';\nimport SensorScreen from './SensorScreen';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport MenuBar from './MenuBar';\n\nexport default function App() {\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <MenuBar />\n      <SensorScreen />\n    </React.Fragment>\n  );\n}"],"sourceRoot":""}