{"version":3,"sources":["utils/applogs.js","service/sensorValues.js","SensorValueListDialog.js","ValueButton.js","SensorItem.js","service/sensors.js","SensorList.js","SensorFavourites.js","SensorScreen.js","NotificationEventsGroup.js","NotificationEventsMenuItem.js","ApplicationLogsMenuItem.js","MenuBar.js","App.js","serviceWorker.js","subscription.js","index.js"],"names":["getItem","item","localStorage","addLog","label","obj","logs","JSON","parse","push","id","length","message","newLogs","stringify","setItem","clear","loadSensorValues","queryKey","console","log","sensorId","valueResolution","fromDateTime","Date","getTime","toDateTime","fetch","then","response","json","array","prop","items","series","reduce","groups","val","lastUpdated","catch","error","SensorValueListDialog","sensor","open","onClose","React","useState","setValueResolution","currentSensor","setCurrentSensor","enabled","setEnabled","useQuery","sensorid","data","newSensorResult","isLoading","useEffect","newSensor","filter","s","type","epochToTime","epoch","d","setUTCSeconds","toLocaleTimeString","stringFormatOptions","minimumFractionDigits","maximumFractionDigits","Dialog","aria-labelledby","DialogTitle","name","FormControl","InputLabel","Select","labelId","value","onChange","event","target","MenuItem","List","Skeleton","variant","width","height","map","entry","idx","secondary","toLocaleString","undefined","ListItem","button","onClick","key","ListItemText","primary","tempColor","teal","humidityColor","indigo","uvColor","blueGrey","lumColor","pink","defaultColor","grey","getColor","getUnitSign","ValueButton","setOpen","formatOptions","Button","style","backgroundColor","slice","reverse","maxWidth","useStyles","makeStyles","root","paddingTop","paddingBottom","SensorItem","sensors","classes","className","substring","moment","fromNow","display","flexDirection","size","chunks","chunk","collection","iteratee","loadSensors","updateSensor","isFavourite","snoozeUntil","patchObject","_","isUndefined","headers","method","body","theme","palette","background","paper","skeleton","Grid","container","spacing","xs","start","contents","sensorData","mutation","favouriteSensors","Object","keys","sort","a","b","localeCompare","predicate","includes","swipeRight","content","action","mutate","SensorList","queryClient","useQueryClient","useMutation","onSuccess","invalidateQueries","setFavouriteSensors","flexGrow","marginTop","marginBottom","padding","textAlign","color","text","fontSize","fontWeight","position","clearIcon","right","top","sensorName","Paper","SensorsFavourites","SensorsScreen","refetchInterval","Container","optionLabels","options","NotificationEventsGroup","eventsList","handleClickEvents","sensorMutation","snoozedColor","setValue","radioGroupRef","useRef","openSnooze","setOpenSnooze","now","snoozeButtonColor","firstSensorValue","latestSensorValue","Fragment","Accordion","AccordionSummary","expandIcon","aria-controls","alignItems","timestamp","stopPropagation","onFocus","AccordionDetails","disableBackdropClick","disableEscapeKeyDown","onEntering","current","focus","DialogContent","dividers","RadioGroup","ref","aria-label","option","FormControlLabel","control","Radio","DialogActions","autoFocus","NotificationEventsMenuItem","openEvents","setOpenEvents","notificationEvents","fullWidth","ApplicationLogsMenuItem","openLogs","setOpenLogs","logrow","menuButton","marginRight","title","dialog2","minWidth","MenuBar","anchorEl","setAnchorEl","Boolean","handleClose","AppBar","Toolbar","IconButton","edge","aria-haspopup","currentTarget","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","QueryClient","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","convertedVapidKey","base64String","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","urlBase64ToUint8Array","process","ReactDOM","render","client","CssBaseline","document","getElementById","URL","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","pushManager","getSubscription","existedSubscription","subscribe","applicationServerKey","userVisibleOnly","newSubscription","subscription","mode","e","Notification","permission"],"mappings":"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","file":"static/js/main.4a222f3b.chunk.js","sourcesContent":["function getItem() {\n    const item = localStorage.getItem('logs');\n    if (item === null) {\n        return '[]';\n    } else {\n        return item;\n    }\n}\n\nexport function addLog(label, obj) {\n    const item = getItem();\n    const logs = JSON.parse(item || []);\n    if (obj) {\n        logs.push({id: logs.length, message:`${label}: ${obj}`});\n    } else {\n        logs.push({id: logs.length, message:`${label}`});\n    }\n    const newLogs = JSON.stringify(logs);\n    localStorage.setItem('logs', newLogs);\n}\n\nexport function logs() {\n    const item = getItem();\n    return JSON.parse(item);\n}\n\nexport function clear() {\n    localStorage.setItem('logs', '[]');\n}","import { addLog } from '../utils/applogs';\n\nexport const loadSensors = () => {\n  addLog('loadSensors()');\n  return fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensor`)\n    .then(response => response.json())\n    .then(data => {\n      console.log('loadSensors(1)', data);\n      return data.sensors;\n    })\n    .catch((error) => {\n      console.error('ERROR', error);\n    });\n}\n\nexport const updateSensor = ({ sensorId, isFavourite }) => {\n  addLog('unmarkSensorAsFavourite: ', sensorId);\n  return fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensor/${sensorId}`,\n    {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'PATCH',\n      body: JSON.stringify({ isFavourite })\n    }\n  )\n    .then(response => response.json())\n    .catch((error) => {\n      console.error('ERROR', error);\n    });\n};\n\nconst groupBy = (array, prop) => {\n  return array.reduce(function (groups, item) {\n    const val = item[prop]\n    groups[val] = groups[val] || []\n    groups[val].push(item)\n    return groups\n  }, {})\n}\n\nexport const loadSensorValues = ({ queryKey }) => {\n  console.log('loadSensorValues', queryKey);\n\n  const [_key, { \n    sensorId = null, \n    valueResolution = null, \n    fromDateTime = new Date(new Date().getTime() - (6 * 3600 * 1000)), \n    toDateTime = new Date()\n  } = {}] = queryKey;\n\n  addLog('loadSensorValues', fromDateTime, toDateTime);\n  // return fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues${sensorId != null ? `/${sensorId}` : ''}?from=6${valueResolution != null ? `&resolution=${valueResolution}` : ''}`)\n  return fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues?from=6${valueResolution != null ? `&resolution=${valueResolution}` : ''}${sensorId != null ? `&sensorId=${sensorId}` : ''}`)\n    .then(response => response.json())\n    .then(json => {\n      const items = groupBy(json.series, 'sensorid');\n      console.log('loadSensorValues.items', items);\n      return {\n        items,\n        lastUpdated: new Date()\n      };\n    })\n    .catch((error) => {\n      console.error('ERROR', error);\n    });\n}","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { loadSensorValues } from './service/sensorValues'\nimport { useQuery } from 'react-query';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nexport default function SensorValueListDialog({ sensor, open, onClose }) {\n\n  const [valueResolution, setValueResolution] = React.useState('15minutes');\n\n  const [currentSensor, setCurrentSensor] = React.useState(sensor);\n\n  const [enabled, setEnabled] = React.useState(false);\n\n  const { data: newSensorResult = null, isLoading } = useQuery(['loadCurrentSensorValues', { sensorId: currentSensor.sensorid, valueResolution }], loadSensorValues, { enabled });\n\n  React.useEffect(() => {\n    if (newSensorResult !== null) {\n      const sensors = newSensorResult['items'][currentSensor.sensorid];\n      const newSensor = sensors.filter(s => s.type === currentSensor.type)[0];\n      setCurrentSensor(newSensor);\n    }\n  }, [currentSensor, newSensorResult]);\n\n  const handleChange = (event) => {\n    setValueResolution(event.target.value);\n    setEnabled(true);\n  };\n\n  // const epochToDateTime = (epoch) => {\n  //   const d = new Date(0);\n  //   d.setUTCSeconds(epoch / 1000);\n  //   return d.toLocaleDateString('sv-SE') + ' ' + d.toLocaleTimeString();\n  // }\n\n  const epochToDate = (epoch) => {\n    const d = new Date(0);\n    d.setUTCSeconds(epoch / 1000);\n    return d.toLocaleDateString('sv-SE');\n  }\n\n  const epochToTime = (epoch) => {\n    const d = new Date(0);\n    d.setUTCSeconds(epoch / 1000);\n    return d.toLocaleTimeString();\n  }\n\n  const stringFormatOptions = { minimumFractionDigits: 2, maximumFractionDigits: 2 };\n\n  return (\n    <Dialog onClose={onClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n      <DialogTitle id=\"simple-dialog-title\">{currentSensor.name + ' (' + currentSensor.type + ')'}</DialogTitle>\n      <FormControl>\n        <InputLabel id=\"demo-simple-select-label\">Resolution</InputLabel>\n        <Select\n          labelId=\"value-resolution-label\"\n          id=\"value-resolution-select\"\n          value={valueResolution}\n          onChange={handleChange}\n        >\n          <MenuItem value={'15minutes'}>15 minutes</MenuItem>\n          <MenuItem value={'hour'}>Hourly</MenuItem>\n          <MenuItem value={'day'}>Daily</MenuItem>\n        </Select>\n      </FormControl>\n      <List>\n        {isLoading && \n        <Skeleton variant=\"rect\" width={166} height={128} />\n        }\n        {!isLoading && currentSensor && currentSensor.data && currentSensor.data.map((entry, idx) => {\n          if (valueResolution === 'day') {\n            const secondary = (entry[2] && entry[3] && <>\n              <b>Min: </b>{entry[2].toLocaleString(undefined, stringFormatOptions)}\n              <br />\n              <b>Max: </b>{entry[3].toLocaleString(undefined, stringFormatOptions)}\n            </>);\n            return (\n              <ListItem button onClick={() => setValueResolution('hour')} key={idx}>\n                <ListItemText primary={entry[0]} secondary={secondary}/>&nbsp;\n                <ListItemText primary={entry[1].toLocaleString(undefined, stringFormatOptions)} />\n              </ListItem>\n            );\n          } else if (valueResolution === 'hour') {\n            const secondary = (entry[2] && entry[3] && <>\n              <b>Min: </b>{entry[2].toLocaleString(undefined, stringFormatOptions)}\n              <br />\n              <b>Max: </b>{entry[3].toLocaleString(undefined, stringFormatOptions)}\n            </>);\n            return (\n              <ListItem button onClick={() => setValueResolution('15minutes')} key={idx}>\n                <ListItemText primary={entry[0]} secondary={secondary}/>&nbsp;\n                <ListItemText primary={entry[1].toLocaleString(undefined, stringFormatOptions)} />\n              </ListItem>\n            );\n          }\n          return (\n            <ListItem button onClick={onClose} key={idx}>\n              <ListItemText primary={epochToTime(entry[0])} />\n              <ListItemText primary={entry[1].toLocaleString(undefined, stringFormatOptions)} />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Dialog>\n  )\n}","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { blueGrey, pink, teal, indigo, grey } from '@material-ui/core/colors';\nimport SensorValueListDialog from './SensorValueListDialog';\n\nconst tempColor = teal[\"400\"];\nconst humidityColor = indigo[\"400\"];\nconst uvColor = blueGrey[\"400\"];\nconst lumColor = pink[\"400\"];\nconst defaultColor = grey[\"400\"];\n\nconst getColor = (value, type) => {\n  switch (type) {\n    case 'temp': return tempColor;\n    case 'humidity': return humidityColor;\n    case 'uv': return uvColor;\n    case 'lum': return lumColor;\n    default: return defaultColor;\n  }\n}\n\nconst getUnitSign = (type) => {\n  switch (type) {\n    case \"temp\": return \"C\";\n    case \"humidity\": return \"%\";\n    case \"lum\": return \"L\";\n    case \"uv\": return \"UV\";\n    default: return \"N/A\";\n  }\n}\n\nexport default function ValueButton({ sensor }) {\n\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(false);\n  };\n\n  const formatOptions = sensor.type === 'temp' \n    ? {minimumFractionDigits: 1, maximumFractionDigits: 1}\n    : {minimumFractionDigits: 0, maximumFractionDigits: 0};\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        key={sensor.type}\n        style={{ backgroundColor: getColor(sensor.data.slice().reverse()[0][1], sensor.type), maxWidth: 64 }}\n        onClick={() => setOpen(true)}\n      >{sensor.data.slice().reverse()[0][1].toLocaleString(undefined, formatOptions) + getUnitSign(sensor.type)}\n      </Button>\n      <SensorValueListDialog sensor={sensor} open={open} onClose={onClose} />\n    </>\n  )\n}","import React from 'react';\nimport moment from 'moment';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Chunk, Map } from 'react-lodash';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ValueButton from './ValueButton'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n}));\n\nexport default function SensorItem({ sensors }) {\n  const classes = useStyles();\n\n  return (\n    <ListItem className={classes.root}>\n      <ListItemText\n        primary={sensors[0].name.substring(0, 35) + (sensors[0].name.length > 35 ? \"...\" : \"\")}\n        secondary={moment(sensors[0].data.slice().reverse()[0][0]).fromNow()} />\n\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        <Chunk array={sensors} size={2}>\n          {chunks =>\n            chunks.map((chunk, idx) =>\n              <div key={idx}>\n                <Map collection={chunk} iteratee={sensor =>\n                  <ValueButton sensor={sensor} key={sensor.type} />\n                } />\n              </div>\n            )\n          }\n        </Chunk>\n      </div>\n    </ListItem>\n  )\n}\n","import { addLog } from '../utils/applogs';\nimport _ from 'lodash';\n\nexport const loadSensors = () => {\n  addLog('loadSensors()');\n  return fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensor`)\n    .then(response => response.json())\n    .then(data => {\n      console.log('loadSensors(1)', data);\n      return data.sensors;\n    })\n    .catch((error) => {\n      console.error('ERROR', error);\n    });\n}\n\nexport const updateSensor = ({ sensorId, isFavourite, snoozeUntil }) => {\n  addLog('updateSensor: ', sensorId);\n  const patchObject = {};\n  if (!_.isUndefined(isFavourite)) {\n    patchObject.isFavourite = isFavourite;\n  }\n  if (!_.isUndefined(snoozeUntil)) {\n    patchObject.snoozeUntil = snoozeUntil;\n  }\n  return fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensor/${sensorId}`,\n    {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'PATCH',\n      body: JSON.stringify(patchObject)\n    }\n  )\n    .then(response => response.json())\n    .catch((error) => {\n      console.error('ERROR', error);\n    });\n};\n","import React from 'react';\nimport SensorItem from './SensorItem'\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  SwipeableList,\n  SwipeableListItem\n} from '@sandstreamdev/react-swipeable-list';\nimport '@sandstreamdev/react-swipeable-list/dist/styles.css';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport Grid from '@material-ui/core/Grid';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { Map, Range, Filter } from 'react-lodash';\nimport { useMutation, useQueryClient, useQuery } from 'react-query';\nimport { updateSensor, loadSensors } from './service/sensors';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 440,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nconst skeleton = () => {\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <Grid container spacing={1}>\n          <Range start={10}>\n            {array =>\n              <Map collection={array} iteratee={id =>\n                <Grid item xs={12} key={id}>\n                  <Skeleton variant=\"rect\" width={'100%'} height={56} />\n                </Grid>\n              } />\n            }\n          </Range>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst contents = (sensorData, classes, mutation, favouriteSensors) => {\n  const items = Object.keys(sensorData.items)\n    .sort((a, b) => sensorData.items[a][0].name.localeCompare(sensorData.items[b][0].name));\n\n  const swipeRightOptions = sensorId => ({\n    content: <FavoriteIcon />,\n    action: () => mutation.mutate({ sensorId, isFavourite: true })\n  });\n\n  return (\n    <SwipeableList className={classes.root}>\n      <Filter collection={items} predicate={item => !favouriteSensors.includes(item) }>\n        {sensors =>\n          <Map collection={sensors} iteratee={item =>\n            <SwipeableListItem key={item} swipeRight={swipeRightOptions(item)} >\n              <SensorItem sensors={sensorData.items[item]} />\n            </SwipeableListItem>\n          } />\n        }\n      </Filter>\n    </SwipeableList>\n  );\n}\n\nexport default function SensorList({ sensorData, isLoading }) {\n  const classes = useStyles();\n\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation(updateSensor, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('loadSensors')\n    },\n  });\n\n  const { data: sensors = [] } = useQuery('loadSensors', loadSensors);\n  const [favouriteSensors, setFavouriteSensors] = React.useState([]);\n\n  React.useEffect(() => {\n    setFavouriteSensors(\n      sensors.filter(sensor => sensor.isFavourite)\n        .map(sensor => `${sensor.sensorId}`)\n    );\n  }, [sensors]);\n\n  if (isLoading) {\n    return skeleton();\n  } else {\n    return contents(sensorData, classes, mutation, favouriteSensors);\n  }\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport ValueButton from './ValueButton';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Map } from 'react-lodash';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { loadSensors, updateSensor } from './service/sensors';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    maxWidth: 440,\n    marginTop: 10,\n    marginBottom: 10\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    fontSize: 16,\n    fontWeight: 700,\n    position: 'relative'\n  },\n  clearIcon: {\n    color: '#DDDDDD',\n    position: 'absolute',\n    right: 2,\n    top: 2,\n    '&:hover': {\n      color: '#444444',\n    },\n  },\n  sensorName: {\n    marginTop: 0\n  }\n}));\n\nconst skeleton = () => {\n  return (\n    <>\n      <Grid item xs={6} key={1}>\n        <Skeleton variant=\"rect\" width={166} height={128} />\n      </Grid>\n      <Grid item xs={6} key={2}>\n        <Skeleton variant=\"rect\" width={166} height={128} />\n      </Grid>\n    </>\n  );\n};\n\nconst contents = (classes, favouriteSensors, sensorData, mutation) => {\n  return (\n    <Map collection={favouriteSensors} iteratee={sensorId =>\n      <Grid item xs={6} key={sensorId}>\n        <Paper className={classes.paper}>\n          <ClearIcon className={classes.clearIcon} onClick={() => mutation.mutate({ sensorId, isFavourite: false })} />\n          <p className={classes.sensorName}>\n            {sensorData.items[sensorId] && sensorData.items[sensorId][0].name}\n          </p>\n          <div>\n            <Map collection={sensorData.items[sensorId]} iteratee={sensor =>\n              ['temp', 'humidity'].includes(sensor.type) ? <ValueButton sensor={sensor} key={sensor.type} /> : ''\n            } />\n          </div>\n        </Paper>\n      </Grid>\n    } />\n  );\n};\n\nexport default function SensorsFavourites({ sensorData, isLoading }) {\n  const queryClient = useQueryClient();\n\n  const { data: sensors = [] } = useQuery('loadSensors', loadSensors);\n  const mutation = useMutation(updateSensor, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('loadSensors')\n    },\n  });\n\n  const [favouriteSensors, setFavouriteSensors] = React.useState([]);\n\n  React.useEffect(() => {\n    setFavouriteSensors(\n      sensors.filter(sensor => sensor.isFavourite)\n        .map(sensor => sensor.sensorId)\n    );\n  }, [sensors]);\n\n  const classes = useStyles();\n\n  return (\n    <Grid id=\"favourites\" container spacing={3} className={classes.root}>\n      <Grid item xs={12}>\n        <Grid container spacing={1}>\n          {isLoading ? skeleton() : contents(classes, favouriteSensors, sensorData, mutation)}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport SensorList from './SensorList';\nimport SensorsFavourites from './SensorFavourites';\nimport Container from '@material-ui/core/Container';\nimport { loadSensorValues } from './service/sensorValues';\nimport { useQuery } from 'react-query';\n\nexport default function SensorsScreen() {\n  const {\n    data: sensorData = { items: [], lastUpdated: new Date() },\n    isLoading\n  } = useQuery('loadSensorValues', loadSensorValues, { refetchInterval: 60000 });\n\n  return (\n    <Container maxWidth=\"sm\">\n      <SensorsFavourites sensorData={sensorData} isLoading={isLoading} />\n      <SensorList sensorData={sensorData} isLoading={isLoading} />\n    </Container>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Map } from 'react-lodash';\nimport SnoozeIcon from '@material-ui/icons/Snooze';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport moment from 'moment';\nimport { teal } from '@material-ui/core/colors';\n\nconst optionLabels = {\n  '1': '1 hour',\n  '2': '2 hours',\n  '4': '4 hours',\n  '24': '24 hours'\n}\nconst options = ['1', '2', '4', '24'];\n\nexport default function NotificationEventsGroup({ eventsList, handleClickEvents, sensorMutation, sensor }) {\n  const snoozedColor = teal[\"400\"];\n\n  const epochToTime = (epoch) => {\n    const d = new Date(0);\n    d.setUTCSeconds(epoch / 1000);\n    return d.toLocaleTimeString();\n  }\n\n  const valueProp = '1';\n  const [value, setValue] = React.useState(valueProp);\n  const radioGroupRef = React.useRef(null);\n  const [openSnooze, setOpenSnooze] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!openSnooze) {\n      setValue(valueProp);\n    }\n  }, [valueProp, openSnooze]);\n\n  const handleSnooze = () => {\n    setOpenSnooze(true);\n  }\n\n  const handleEntering = () => {\n    if (radioGroupRef.current != null) {\n      radioGroupRef.current.focus();\n    }\n  };\n\n  const handleCancel = () => {\n    setOpenSnooze(false);\n  };\n\n  const handleOk = () => {\n    setOpenSnooze(false);\n    sensorMutation.mutate({ sensorId: eventsList[0].sensorId, snoozeUntil: new Date().getTime() + (1000 * value * 60 * 60) });\n  };\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  const now = new Date().getTime();\n\n  const snoozeButtonColor = sensor.snoozeUntil > now\n    ? snoozedColor\n    : 'black';\n\n  const firstSensorValue = eventsList[0];\n  const latestSensorValue = [...eventsList].reverse()[0];\n\n  return (\n    <React.Fragment>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"content\"\n          id=\"header\"\n        >\n          <Grid container spacing={0} alignItems=\"center\">\n            <Grid item xs={11}>\n              <ListItemText primary={firstSensorValue.name} secondary={epochToTime(latestSensorValue.timestamp)} />\n            </Grid>\n            <Grid item xs={1}>\n              <SnoozeIcon\n                style={{ color: snoozeButtonColor }}\n                onClick={(event) => { event.stopPropagation(); handleSnooze(); }}\n                onFocus={(event) => event.stopPropagation()}\n              />\n            </Grid>\n          </Grid>\n        </AccordionSummary>\n        <AccordionDetails>\n          <List>\n            <Map collection={eventsList} iteratee={entry =>\n              <ListItem button onClick={handleClickEvents} key={`${entry.sensorId}-${entry.timestamp}`}>\n                <ListItemText secondary={epochToTime(entry.timestamp)} primary={entry.message} />\n              </ListItem>\n            } />\n          </List>\n        </AccordionDetails>\n      </Accordion>\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        maxWidth=\"xs\"\n        onEntering={handleEntering}\n        aria-labelledby=\"confirmation-dialog-title\"\n        open={openSnooze}\n      >\n        <DialogTitle id=\"confirmation-dialog-title\">Snooze For</DialogTitle>\n        <DialogContent dividers>\n          {sensor.snoozeUntil > now && `Active again ${moment(sensor.snoozeUntil).fromNow()}.`}\n          <RadioGroup\n            ref={radioGroupRef}\n            aria-label=\"snooze-for\"\n            name=\"snooze-for\"\n            value={value}\n            onChange={handleChange}\n          >\n            {options.map((option) => (\n              <FormControlLabel value={option} key={option} control={<Radio />} label={optionLabels[option]} />\n            ))}\n          </RadioGroup>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleCancel} color=\"primary\">\n            Cancel\n        </Button>\n          <Button onClick={handleOk} color=\"primary\">\n            Ok\n        </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  )\n}","import React from 'react';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport List from '@material-ui/core/List';\nimport { Map, GroupBy } from 'react-lodash';\nimport { addLog } from './utils/applogs';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport NotificationEventsGroup from './NotificationEventsGroup';\nimport { loadSensors, updateSensor } from './service/sensors';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport Grid from '@material-ui/core/Grid';\n\nconst skeleton = () => {\n  return (\n    <Grid container spacing={1} alignItems=\"center\">\n      <Map collection={[1, 2, 3]} iteratee={idx =>\n        <Grid item xs={12}>\n          <Skeleton key={idx} variant=\"rect\" width={309} height={80} />\n        </Grid>\n      } />\n    </Grid>\n  );\n}\n\nexport default function NotificationEventsMenuItem({ onClose }) {\n\n  const [openEvents, setOpenEvents] = React.useState(false);\n\n  const handleClickEvents = () => {\n    setOpenEvents(false);\n    onClose();\n  };\n\n  const reloadData = () => {\n    addLog('reloadData');\n    return fetch(`https://aoq53tdls8.execute-api.us-east-1.amazonaws.com/dev/sensorNotificationEvent`)\n      .then(response => response.json())\n      .catch((error) => {\n        console.error('ERROR', error);\n      });\n  }\n\n  const handleOpenEvents = () => {\n    setOpenEvents(true);\n  };\n\n  const { data: notificationEvents = [], isLoading } = useQuery('loadNotificationEvents', reloadData, { refetchInterval: 60000 });\n\n  const queryClient = useQueryClient()\n  const { data: sensors } = useQuery('loadSensors', loadSensors);\n  const mutation = useMutation(updateSensor, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('loadSensors')\n    },\n  });\n\n  return (\n    <React.Fragment>\n      <MenuItem onClick={handleOpenEvents}>\n        Notification Events\n      </MenuItem>\n      <Dialog onClose={handleClickEvents} aria-labelledby=\"simple-dialog-title\" open={openEvents} fullWidth={true} maxWidth={'xs'}>\n        <DialogTitle id=\"simple-dialog-title\">Notification Events</DialogTitle>\n        <List>\n          {isLoading && skeleton()}\n          {!isLoading &&\n            <GroupBy collection={notificationEvents} iteratee={(entry) => entry.sensorId}>\n              {(value) =>\n                <Map collection={Object.keys(value)} iteratee={sensorId =>\n                  <NotificationEventsGroup\n                    eventsList={value[sensorId]}\n                    handleClickEvents={handleClickEvents}\n                    key={sensorId}\n                    sensorMutation={mutation}\n                    sensor={sensors && sensors.filter(item => `${item.sensorId}` === sensorId)[0]}\n                  />\n                } />\n              }\n            </GroupBy>\n          }\n        </List>\n      </Dialog>\n    </React.Fragment>\n  )\n}","import React from 'react';\n\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport List from '@material-ui/core/List';\nimport { Map } from 'react-lodash';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { logs, clear } from './utils/applogs';\nimport Clear from '@material-ui/icons/Clear';\n\nexport default function ApplicationLogsMenuItem({ onClose }) {\n\n  const [openLogs, setOpenLogs] = React.useState(false);\n\n  const handleClickLogs = () => {\n    setOpenLogs(false);\n    onClose();\n  };\n\n  const handleOpenLogs = () => {\n    setOpenLogs(true);\n  };\n\n\n  return (\n    <React.Fragment>\n      <MenuItem onClick={handleOpenLogs}>\n        Application Logs\n      </MenuItem>\n      <Dialog onClose={handleClickLogs} aria-labelledby=\"simple-dialog-title\" open={openLogs} fullWidth={true} maxWidth={'xs'}>\n        <DialogTitle id=\"simple-dialog-title\">\n          Application Logs\n          <Clear onClick={clear}></Clear>\n        </DialogTitle>\n        <List>\n          <Map collection={logs()} iteratee={logrow =>\n            <ListItem key={logrow.id}>\n              <ListItemText primary={logrow.message || logrow} />\n            </ListItem>\n          } />\n        </List>\n      </Dialog>\n    </React.Fragment>\n  )\n}","import React from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport NotificationEventsMenuItem from './NotificationEventsMenuItem';\nimport ApplicationLogsMenuItem from './ApplicationLogsMenuItem';\nimport { addLog } from './utils/applogs';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  dialog2: {\n    minWidth: \"400px\"\n  }\n}));\n\nexport default function MenuBar() {\n\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n    addLog('handleMenu');\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n    addLog('handleClose');\n  };\n\n  return (\n    <React.Fragment>\n      <AppBar position=\"fixed\" className={classes.root}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            aria-controls=\"menu-appbar\"\n            aria-haspopup=\"true\"\n            onClick={handleMenu}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Menu\n            id=\"menu-appbar\"\n            anchorEl={anchorEl}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            keepMounted\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            open={open}\n            onClose={handleClose}\n          >\n            <div>\n              <NotificationEventsMenuItem onClose={handleClose} />\n            </div>\n            <div>\n              <ApplicationLogsMenuItem onClose={handleClose} />\n            </div>\n          </Menu>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n    </React.Fragment>\n  )\n}","import React from 'react';\nimport SensorScreen from './SensorScreen';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport MenuBar from './MenuBar';\nimport { QueryClient, QueryClientProvider } from 'react-query'\n\nconst queryClient = new QueryClient()\n\nexport default function App() {\n\n  return (\n    <React.Fragment>\n     <QueryClientProvider client={queryClient}>\n        <CssBaseline />\n        <MenuBar />\n        <SensorScreen />\n      </QueryClientProvider>\n    </React.Fragment>\n  );\n}","import { addLog } from './utils/applogs';\nimport { updateSensor } from './service/sensors';\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swFileName = process.env.NODE_ENV === 'production' \n        ? 'service-worker.js' \n        : 'custom-sw.js'\n      const swUrl = `${process.env.PUBLIC_URL}/${swFileName}`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          addLog(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              addLog(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              addLog('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      addLog(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { addLog } from './utils/applogs';\nconst convertedVapidKey = urlBase64ToUint8Array(process.env.REACT_APP_PUBLIC_VAPID_KEY)\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4)\n  // eslint-disable-next-line\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\")\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\nfunction sendSubscription(subscription) {\n  return fetch(`${process.env.REACT_APP_API_URL}/dev/subscription`, {\n    method: 'POST',\n    body: JSON.stringify(subscription),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    mode: 'no-cors'\n  })\n}\n\nexport function subscribeUser() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function(registration) {\n      if (!registration.pushManager) {\n        addLog('Push manager unavailable.')\n        return\n      }\n\n      registration.pushManager.getSubscription().then(function(existedSubscription) {\n        if (existedSubscription === null) {\n          addLog('No subscription detected, make a request.')\n          registration.pushManager.subscribe({\n            applicationServerKey: convertedVapidKey,\n            userVisibleOnly: true,\n          }).then(function(newSubscription) {\n            addLog('New subscription added.')\n            sendSubscription(newSubscription)\n          }).catch(function(e) {\n            if (Notification.permission !== 'granted') {\n              addLog('Permission was not granted.')\n            } else {\n              console.error('An error ocurred during the subscription process.', e)\n            }\n          })\n        } else {\n          addLog('Existed subscription detected.')\n        }\n      })\n    })\n      .catch(function(e) {\n        console.error('An error ocurred during Service Worker registration.', e)\n      })\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as subscription from './subscription';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\nsubscription.subscribeUser();\n"],"sourceRoot":""}