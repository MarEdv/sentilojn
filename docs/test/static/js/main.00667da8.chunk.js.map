{"version":3,"sources":["SensorItem.js","SensorList.js","SensorScreen.js","App.js","serviceWorker.js","subscription.js","index.js"],"names":["getUnitSign","type","SensorItem","sensors","ListItem","ListItemText","primary","name","substring","length","secondary","moment","data","slice","reverse","fromNow","map","sensor","i","Button","variant","key","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","SensorList","sensorData","classes","List","className","Object","keys","items","item","buttonColorFunc","SensorsScreen","props","groupBy","array","prop","reduce","groups","val","push","reloadData","done","fromDateTime","Date","getTime","toDateTime","console","log","fetch","then","response","json","setState","series","lastUpdated","catch","error","state","this","Container","React","Component","navigationOptions","title","flexGrow","menuButton","marginRight","spacing","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","convertedVapidKey","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","urlBase64ToUint8Array","process","ReactDOM","render","useState","anchorEl","setAnchorEl","open","handleClose","Fragment","CssBaseline","AppBar","position","Toolbar","IconButton","edge","color","aria-label","aria-controls","aria-haspopup","onClick","event","currentTarget","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","document","getElementById","URL","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","pushManager","getSubscription","existedSubscription","subscribe","applicationServerKey","userVisibleOnly","newSubscription","subscription","method","body","JSON","stringify","mode","e","Notification","permission"],"mappings":"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","file":"static/js/main.00667da8.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\n\nconst getUnitSign = (type) => {\n  switch (type) {\n    case \"temp\": return \"C\";\n    case \"humidity\": return \"%\";\n    case \"lum\": return \"L\";\n    case \"uv\": return \"UV\";\n    default: return \"N/A\";\n  }\n}\n\nconst epochToDateTime = (epoch) => {\n  const d = new Date(0);\n  d.setUTCSeconds(epoch / 1000);\n  return d.toLocaleDateString('sv-SE') + ' ' + d.toLocaleTimeString();\n}\n\nexport default function SensorItem({ sensors }) {\n\n  return (\n    <ListItem>\n      <ListItemText \n        primary={sensors[0].name.substring(0, 35) + (sensors[0].name.length > 35 ? \"...\" : \"\")}\n        secondary={moment(sensors[0].data.slice().reverse()[0][0]).fromNow()} />\n      \n      {sensors.map((sensor, i) => {\n                return (\n                  <Button\n                    // style={styles.valueButton}\n                    \n                    variant=\"contained\"\n                    key={sensor.type}\n                    // color={this.props.buttonColorFunc(sensor)}\n                    // onPress={this.props.onPress(sensor)}\n                  >{sensor.data.slice().reverse()[0][1] + getUnitSign(sensor.type)}</Button>)\n              })}\n    </ListItem>\n\n      // <View\n      //   style={styles.option}>\n      //   <View style={{ flexDirection: 'column' }}>\n      //     <View style={{ flexDirection: 'row', justifyContent:'space-between'}}>\n      //       <View style={{ flexDirection: 'column' }}>\n      //         <Text style={styles.sensorName}>\n      //           {this.props.sensors[0].name.substring(0, 35) + (this.props.sensors[0].name.length > 35 ? \"...\" : \"\")}\n      //         </Text>\n      //         <Text style={styles.agoText}>\n      //           {moment(this.props.sensors[0].data.slice().reverse()[0][0]).fromNow()}\n      //         </Text>\n      //       </View>\n      //       <View style={{ flexDirection: 'row', justifyContent:'space-between', marginLeft: 5 }}>\n      //         {this.props.sensors.map((sensor, i) => {\n      //           return (\n      //             <Button\n      //               style={styles.valueButton}\n      //               title={sensor.data.slice().reverse()[0][1] + this.getUnitSign(sensor.type)}\n      //               key={sensor.type}\n      //               color={this.props.buttonColorFunc(sensor)}\n      //               onPress={this.props.onPress(sensor)}\n      //             />)\n      //         })}\n      //       </View>\n      //     </View>\n      //   </View>\n      // </View>\n    )\n}\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     paddingTop: 15,\n//   },\n//   graph: {\n//     left:     0,\n//     top:      0,\n//     position: 'absolute',\n//     flex: 0.95\n//   },\n//   optionsTitleText: {\n//     fontSize: 16,\n//     marginLeft: 15,\n//     marginTop: 9,\n//     marginBottom: 12,\n//   },\n//   optionIconContainer: {\n//     marginRight: 9,\n//   },\n//   option: {\n//     backgroundColor: '#fdfdfd',\n//     paddingHorizontal: 5,\n//     paddingLeft: 10,\n//     paddingRight: 10,\n//     paddingVertical: 5,\n//     borderBottomWidth: StyleSheet.hairlineWidth,\n//     borderBottomColor: '#EDEDED',\n//   },\n//   sensorName: {\n//     fontSize: 15,\n//     marginTop: 1,\n//     color: '#000000',\n//     textAlign: 'left',\n//   },\n//   agoText: {\n//     fontSize: 10,\n//     marginTop: 1,\n//     color: '#444444',\n//     textAlign: 'left',\n//   },\n//   sensorValue: {\n//     paddingHorizontal: '5px' // crashes the expo android app (!?!?)\n//   },\n//   valueButton: {\n//     marginLeft: 3\n//   }\n// });\n","import React from 'react';\n// import SensorsGraph from './SensorsGraph'\nimport SensorItem from './SensorItem'\nimport List from '@material-ui/core/List';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 440,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function SensorList({ sensorData }) {\n  // constructor(props) {\n  //   super(props);\n\n  //   setInterval(() => {this.forceUpdate();}, 60000);\n  //   this.state = {\n  //     selectedSensors: [],\n  //     reloading: false\n  //   }\n  // }\n\n  // render() {\n    // const selectedSensorsData = this.state.selectedSensors.map(key => {\n    //   var sensorid = key.split(':')[0];\n    //   var type = key.split(':')[1];\n    //   var sensor = this.props.sensorData.items[sensorid].filter(sensor => sensor.type === type)[0] ;\n    //   console.log('sensorid',sensorid);\n    //   console.log('sensor', sensor);\n    //   return {\n    //     data: sensor.data, \n    //     sensorid: sensor.sensorid, \n    //     type: sensor.type, \n    //     name: sensor.name + \"(\" + (sensor.type === 'temp' ? \"C\" : \"%\") + \")\"\n    //   }\n    // });\n\n    const classes = useStyles();\n\n    return (\n      <List className={classes.root}>\n      {/* <List> */}\n        {\n          Object.keys(sensorData.items).map((item) =>\n            <SensorItem \n              sensors={sensorData.items[item]}\n              buttonColorFunc={(sensor) => '#0000FF'}\n            />\n          )\n        }\n      </List>\n      // <View style={{ flexDirection: 'row', flex: 1, alignItems: 'stretch' }}>\n      //   <FlatList data={Object.keys(this.props.sensorData.items)}\n      //             keyExtractor={item => item}\n      //             style={{ flexGrow: 1 }}\n      //             refreshing={this.state.reloading}\n      //             onRefresh={() => this.setState({reloading: true}, this.props.reloadData(() => this.setState({reloading:false})))}\n      //             renderItem={({item}) => \n      //     <SensorItem buttonColorFunc={(sensor) => this.state.selectedSensors.includes(sensor.sensorid + \":\" + sensor.type) ?\n      //                       '#FF0000' : '#0000FF'}\n      //         sensors={this.props.sensorData.items[item]} onPress={(sensor) => () =>\n      //           {\n      //             if (this.state.selectedSensors.includes(sensor.sensorid + \":\" + sensor.type)) {\n      //               var selectedSensors = this.state.selectedSensors.filter(i => i !== sensor.sensorid + \":\" + sensor.type);\n      //               this.setState({selectedSensors})\n      //             } else {\n      //               var sensors = this.state.selectedSensors.slice();\n      //               sensors.push(sensor.sensorid + \":\" + sensor.type);\n      //               this.setState({selectedSensors: sensors})\n      //             }\n      //           }\n      //         }\n      //       />\n      //     }\n      //   />\n      //   {selectedSensorsData.length > 0 &&\n      //     <SensorsGraph data={{sensorData: selectedSensorsData, lastUpdated: this.props.sensorData.lastUpdated}} \n      //                   reloadData={this.props.reloadData}/>\n      //   }\n      // </View>\n    )\n  // }\n}","import React from 'react';\nimport SensorList from './SensorList';\nimport Container from '@material-ui/core/Container';\n\nexport default class SensorsScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Sensors'\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      sensorData: {\n        items: [],\n        lastUpdated: new Date()\n      }\n    }\n  }\n\n  groupBy = (array, prop) => {\n    return array.reduce(function(groups, item) {\n      const val = item[prop]\n      groups[val] = groups[val] || []\n      groups[val].push(item)\n      return groups\n    }, {})\n  }\n\n  reloadData = (done, fromDateTime = new Date(new Date().getTime() - (6*3600*1000)), toDateTime = new Date()) => {\n    console.log('reloadData', fromDateTime, toDateTime);\n//    fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues?fromDateTime=${parseInt(fromDateTime.getTime()/1000,10)}&toDateTime=${parseInt(toDateTime.getTime()/1000,10)}`)\n    fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues?from=6`)\n    .then(response => response.json())\n    .then(json => this.setState({sensorData: {items: this.groupBy(json.series, 'sensorid'), lastUpdated: new Date()}}, done))\n    .catch((error) =>{\n      console.error('ERROR',error);\n      done();\n    });\n  }\n\n  componentDidMount() {\n    this.reloadData(() => {});\n  }\n\n  render() {\n    return (\n      <Container maxWidth=\"sm\">\n       {/* <Container> */}\n      {this.state.sensorData &&\n            <SensorList reloadData={this.reloadData} sensorData={this.state.sensorData}/>\n          }\n      </Container>\n    );\n  }\n}\n","import React from 'react';\nimport SensorScreen from './SensorScreen';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function App() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n    const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton \n            edge=\"start\" \n            className={classes.menuButton} \n            color=\"inherit\" \n            aria-label=\"menu\" \n            aria-controls=\"menu-appbar\"\n            aria-haspopup=\"true\"\n            onClick={handleMenu}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Menu\n            id=\"menu-appbar\"\n            anchorEl={anchorEl}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            keepMounted\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            open={open}\n            onClose={handleClose}\n          >\n            <MenuItem onClick={handleClose}>Profile</MenuItem>\n            <MenuItem onClick={handleClose}>My account</MenuItem>\n          </Menu>\n        </Toolbar>\n      </AppBar>\n      </div>\n      <SensorScreen />\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swFileName = process.env.NODE_ENV === 'production' \n        ? 'service-worker.js' \n        : 'custom-sw.js'\n      const swUrl = `${process.env.PUBLIC_URL}/${swFileName}`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const convertedVapidKey = urlBase64ToUint8Array(process.env.REACT_APP_PUBLIC_VAPID_KEY)\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4)\n  // eslint-disable-next-line\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\")\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\nfunction sendSubscription(subscription) {\n  return fetch(`${process.env.REACT_APP_API_URL}/dev/subscription`, {\n    method: 'POST',\n    body: JSON.stringify(subscription),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    mode: 'no-cors'\n  })\n}\n\nexport function subscribeUser() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function(registration) {\n      if (!registration.pushManager) {\n        console.log('Push manager unavailable.')\n        return\n      }\n\n      registration.pushManager.getSubscription().then(function(existedSubscription) {\n        if (existedSubscription === null) {\n          console.log('No subscription detected, make a request.')\n          registration.pushManager.subscribe({\n            applicationServerKey: convertedVapidKey,\n            userVisibleOnly: true,\n          }).then(function(newSubscription) {\n            console.log('New subscription added.')\n            sendSubscription(newSubscription)\n          }).catch(function(e) {\n            if (Notification.permission !== 'granted') {\n              console.log('Permission was not granted.')\n            } else {\n              console.error('An error ocurred during the subscription process.', e)\n            }\n          })\n        } else {\n          console.log('Existed subscription detected.')\n        }\n      })\n    })\n      .catch(function(e) {\n        console.error('An error ocurred during Service Worker registration.', e)\n      })\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as subscription from './subscription';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\nsubscription.subscribeUser();\n"],"sourceRoot":""}