{"version":3,"sources":["ValueButton.js","SensorItem.js","SensorList.js","SensorScreen.js","NotificationEventsGroup.js","App.js","serviceWorker.js","subscription.js","index.js"],"names":["tempColor","teal","humidityColor","indigo","uvColor","blueGrey","lumColor","pink","defaultColor","grey","getColor","value","type","getUnitSign","epochToTime","epoch","d","Date","setUTCSeconds","toLocaleTimeString","ValueButton","sensor","React","useState","open","setOpen","handleClick","Button","variant","key","style","backgroundColor","data","slice","reverse","onClick","Dialog","onClose","aria-labelledby","DialogTitle","id","name","List","map","entry","idx","ListItem","button","ListItemText","primary","useStyles","makeStyles","root","paddingTop","paddingBottom","SensorItem","sensors","classes","className","substring","length","secondary","moment","fromNow","display","flexDirection","array","size","chunks","chunk","collection","iteratee","theme","width","maxWidth","palette","background","paper","SensorList","sensorData","items","Object","keys","sort","a","b","localeCompare","item","groupBy","prop","reduce","groups","val","push","reloadData","setSensorData","fromDateTime","getTime","toDateTime","console","log","fetch","then","response","json","series","lastUpdated","catch","error","SensorsScreen","state","useEffect","Container","NotificationEventsGroup","eventsList","handleClickEvents","timestamp","Collapse","in","timeout","unmountOnExit","sensorId","inset","message","flexGrow","menuButton","marginRight","spacing","title","setNotifictionEvents","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","convertedVapidKey","base64String","padding","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","urlBase64ToUint8Array","process","ReactDOM","render","anchorEl","setAnchorEl","handleClose","openEvents","setOpenEvents","notificationEvents","Fragment","CssBaseline","AppBar","position","Toolbar","IconButton","edge","color","aria-label","aria-controls","aria-haspopup","event","currentTarget","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","MenuItem","document","getElementById","URL","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","pushManager","getSubscription","existedSubscription","subscribe","applicationServerKey","userVisibleOnly","newSubscription","subscription","method","body","JSON","stringify","mode","e","Notification","permission"],"mappings":"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","file":"static/js/main.7f74d5aa.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { blueGrey, pink, teal, indigo, grey } from '@material-ui/core/colors';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\n\nconst tempColor = teal[\"400\"];\nconst humidityColor = indigo[\"400\"];\nconst uvColor = blueGrey[\"400\"];\nconst lumColor = pink[\"400\"];\nconst defaultColor = grey[\"400\"];\n\nconst getColor = (value, type) => {\n  switch (type) {\n    case 'temp': return tempColor;\n    case 'humidity': return humidityColor;\n    case 'uv': return uvColor;\n    case 'lum': return lumColor;\n    default: return defaultColor;\n  }\n}\n\nconst getUnitSign = (type) => {\n  switch (type) {\n    case \"temp\": return \"C\";\n    case \"humidity\": return \"%\";\n    case \"lum\": return \"L\";\n    case \"uv\": return \"UV\";\n    default: return \"N/A\";\n  }\n}\n\n// const epochToDateTime = (epoch) => {\n//   const d = new Date(0);\n//   d.setUTCSeconds(epoch / 1000);\n//   return d.toLocaleDateString('sv-SE') + ' ' + d.toLocaleTimeString();\n// }\n\nconst epochToTime = (epoch) => {\n  const d = new Date(0);\n  d.setUTCSeconds(epoch / 1000);\n  return d.toLocaleTimeString();\n}\n\nexport default function ValueButton({ sensor }) {\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <Button\n      variant=\"contained\"\n      key={sensor.type}\n      style={{ backgroundColor: getColor(sensor.data.slice().reverse()[0][1], sensor.type) }}\n      onClick={handleClick}\n    >{sensor.data.slice().reverse()[0][1] + getUnitSign(sensor.type)}\n      <Dialog onClose={handleClick} aria-labelledby=\"simple-dialog-title\" open={open}>\n        <DialogTitle id=\"simple-dialog-title\">{sensor.name + ' (' + sensor.type + ')'}</DialogTitle>\n        <List>\n          {sensor.data.map((entry, idx) => (\n            <ListItem button onClick={handleClick} key={idx}>\n              <ListItemText primary={epochToTime(entry[0])} />\n              <ListItemText primary={entry[1]} />\n            </ListItem>\n          ))}\n        </List>\n      </Dialog>\n    </Button>\n  )\n}","import React from 'react';\nimport moment from 'moment';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Chunk, Map } from 'react-lodash';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ValueButton from './ValueButton'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n}));\n\nexport default function SensorItem({ sensors }) {\n  const classes = useStyles();\n\n  return (\n    <ListItem className={classes.root}>\n      <ListItemText\n        primary={sensors[0].name.substring(0, 35) + (sensors[0].name.length > 35 ? \"...\" : \"\")}\n        secondary={moment(sensors[0].data.slice().reverse()[0][0]).fromNow()} />\n\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        <Chunk array={sensors} size={2}>\n          {chunks =>\n            chunks.map((chunk, idx) =>\n              <div key={idx}>\n                <Map collection={chunk} iteratee={sensor =>\n                  <ValueButton sensor={sensor} key={sensor.type} />\n                } />\n              </div>\n            )\n          }\n        </Chunk>\n      </div>\n    </ListItem>\n  )\n}\n","import React from 'react';\nimport SensorItem from './SensorItem'\nimport List from '@material-ui/core/List';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 440,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function SensorList({ sensorData }) {\n    const classes = useStyles();\n    const items = Object.keys(sensorData.items)\n      .sort((a, b) => sensorData.items[a][0].name.localeCompare(sensorData.items[b][0].name));\n\n    return (\n      <List className={classes.root}>\n        {\n          items.map((item) =>\n            <SensorItem \n              sensors={sensorData.items[item]}\n              key={item}\n            />\n          )\n        }\n      </List>\n   )\n}","import React from 'react';\nimport SensorList from './SensorList';\nimport Container from '@material-ui/core/Container';\n\nconst groupBy = (array, prop) => {\n  return array.reduce(function(groups, item) {\n    const val = item[prop]\n    groups[val] = groups[val] || []\n    groups[val].push(item)\n    return groups\n  }, {})\n}\n\nconst reloadData = (setSensorData, fromDateTime = new Date(new Date().getTime() - (6*3600*1000)), toDateTime = new Date()) => {\n  console.log('reloadData', fromDateTime, toDateTime);\n//    fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues?fromDateTime=${parseInt(fromDateTime.getTime()/1000,10)}&toDateTime=${parseInt(toDateTime.getTime()/1000,10)}`)\n  fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues?from=6`)\n  .then(response => response.json())\n  .then(json => {\n    setSensorData({\n      sensorData: { \n        items: groupBy(json.series, 'sensorid'), \n        lastUpdated: new Date()\n      }\n    });\n  })\n  .catch((error) => {\n    console.error('ERROR',error);\n  });\n}\n\nexport default function SensorsScreen() {\n  const [state, setSensorData] = React.useState({\n    sensorData: {\n      items: [],\n      lastUpdated: new Date()\n    }\n  });\n\n  React.useEffect(() => {\n    reloadData(setSensorData);\n  }, []);\n\n  return (\n    <Container maxWidth=\"sm\">\n    {state.sensorData &&\n          <SensorList reloadData={reloadData} sensorData={state.sensorData}/>\n        }\n    </Container>\n  );\n}\n","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Collapse } from '@material-ui/core';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { Map } from 'react-lodash';\n\nexport default function NotificationEventsGroup({ eventsList, handleClickEvents }) {\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  const epochToTime = (epoch) => {\n    const d = new Date(0);\n    d.setUTCSeconds(epoch / 1000);\n    return d.toLocaleTimeString();\n  }\n  \n    return (\n      <div>\n        <ListItem button onClick={handleClick}>\n          <ListItemText primary={eventsList[0].name} secondary={`${eventsList.length} entries`} />\n          <ListItemText primary={epochToTime([...eventsList].reverse()[0].timestamp)} />\n          { open ? <ExpandLess /> : <ExpandMore /> }\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <Map collection={eventsList} iteratee={entry =>\n            <ListItem button onClick={handleClickEvents} key={`${entry.sensorId}-${entry.timestamp}`}>\n              <ListItemText inset secondary={epochToTime(entry.timestamp)} primary={entry.message} />\n            </ListItem>\n          } />\n        </Collapse>\n      </div>\n    )\n}","import React from 'react';\nimport SensorScreen from './SensorScreen';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport List from '@material-ui/core/List';\nimport { GroupBy, Map } from 'react-lodash';\nimport NotificationEventsGroup from './NotificationEventsGroup';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst reloadData = (setNotifictionEvents) => {\n  console.log('reloadData');\n  fetch(`https://aoq53tdls8.execute-api.us-east-1.amazonaws.com/dev/sensorNotificationEvent`)\n  .then(response => response.json())\n  .then(json => {\n    setNotifictionEvents(json);\n  })\n  .catch((error) => {\n    console.error('ERROR',error);\n  });\n}\n\nexport default function App() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n    console.log('handleMenu');\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n    console.log('handleClose');\n  };\n\n  const [openEvents, setOpenEvents] = React.useState(false);\n  const [notificationEvents, setNotifictionEvents] = React.useState([]);\n\n  const handleClickEvents = () => {\n    setOpenEvents(false);\n    handleClose();\n  };\n\n  const handleOpenEvents = () => {\n    setOpenEvents(true);\n  };\n\n  React.useEffect(() => {\n    reloadData(setNotifictionEvents);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <div className={classes.root}>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <IconButton \n            edge=\"start\" \n            className={classes.menuButton} \n            color=\"inherit\" \n            aria-label=\"menu\" \n            aria-controls=\"menu-appbar\"\n            aria-haspopup=\"true\"\n            onClick={handleMenu}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Menu\n            id=\"menu-appbar\"\n            anchorEl={anchorEl}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            keepMounted\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            open={open}\n            onClose={handleClose}\n          >\n            <div>\n              <MenuItem onClick={handleOpenEvents}>\n                Notification Events\n              </MenuItem>\n              <Dialog onClose={handleClickEvents} aria-labelledby=\"simple-dialog-title\" open={openEvents}>\n                  <DialogTitle id=\"simple-dialog-title\">Notification Events</DialogTitle>\n                  <List>\n                    <GroupBy collection={notificationEvents} iteratee={(entry) => entry.sensorId}>\n                      { (value) => \n                        <Map collection={Object.keys(value)} iteratee={key =>\n                          <NotificationEventsGroup eventsList={value[key]} handleClickEvents={handleClickEvents} key={key} />\n                        } />\n                      }\n                    </GroupBy>\n                  </List>\n                </Dialog>\n            </div>\n          </Menu>\n        </Toolbar>\n      </AppBar>\n      <Toolbar/>\n      </div>\n      <SensorScreen />\n    </React.Fragment>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swFileName = process.env.NODE_ENV === 'production' \n        ? 'service-worker.js' \n        : 'custom-sw.js'\n      const swUrl = `${process.env.PUBLIC_URL}/${swFileName}`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const convertedVapidKey = urlBase64ToUint8Array(process.env.REACT_APP_PUBLIC_VAPID_KEY)\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4)\n  // eslint-disable-next-line\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\")\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\nfunction sendSubscription(subscription) {\n  return fetch(`${process.env.REACT_APP_API_URL}/dev/subscription`, {\n    method: 'POST',\n    body: JSON.stringify(subscription),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    mode: 'no-cors'\n  })\n}\n\nexport function subscribeUser() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function(registration) {\n      if (!registration.pushManager) {\n        console.log('Push manager unavailable.')\n        return\n      }\n\n      registration.pushManager.getSubscription().then(function(existedSubscription) {\n        if (existedSubscription === null) {\n          console.log('No subscription detected, make a request.')\n          registration.pushManager.subscribe({\n            applicationServerKey: convertedVapidKey,\n            userVisibleOnly: true,\n          }).then(function(newSubscription) {\n            console.log('New subscription added.')\n            sendSubscription(newSubscription)\n          }).catch(function(e) {\n            if (Notification.permission !== 'granted') {\n              console.log('Permission was not granted.')\n            } else {\n              console.error('An error ocurred during the subscription process.', e)\n            }\n          })\n        } else {\n          console.log('Existed subscription detected.')\n        }\n      })\n    })\n      .catch(function(e) {\n        console.error('An error ocurred during Service Worker registration.', e)\n      })\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as subscription from './subscription';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\nsubscription.subscribeUser();\n"],"sourceRoot":""}