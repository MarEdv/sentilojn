{"version":3,"sources":["SensorsGraph.js","SensorItem.js","SensorList.js","SensorScreen.js","App.js","serviceWorker.js","subscription.js","index.js"],"names":["SensorsGraph","props","series","state","tracker","trackerEvent","hours","fromDate","moment","Date","subtract","toDate","handleTrackerChanged","t","trackerValue","map","item","i","e","atTime","eventTime","begin","getTime","end","eventValue","toPoint","v","push","setState","setFromDate","date","setToDate","console","log","data","sensorid","sensorData","sensor","TimeSeries","name","columns","points","key","nextProps","lastUpdated","this","length","nextState","categories","serie","meta","label","style","styler","View","flex","flexGrow","flexDirection","justifyContent","padding","Text","value","format","locale","onChange","Button","alignItems","margin","title","onPress","reloadData","titleStyle","fill","fontWeight","timeRange","reduce","acc","extents","range","timeAxisTickCount","onTrackerChanged","height","window","innerHeight","id","min","idx","Math","max","width","axis","type","event","column","markerLabel","markerLabelAlign","markerLabelStyle","stroke","markerRadius","markerStyle","React","Component","SensorItem","epoch","d","setUTCSeconds","toLocaleDateString","toLocaleTimeString","styles","option","sensorName","sensors","substring","agoText","slice","reverse","fromNow","marginLeft","valueButton","getUnitSign","color","buttonColorFunc","StyleSheet","create","container","paddingTop","graph","left","top","position","optionsTitleText","fontSize","marginTop","marginBottom","optionIconContainer","marginRight","backgroundColor","paddingHorizontal","paddingLeft","paddingRight","paddingVertical","borderBottomWidth","hairlineWidth","borderBottomColor","textAlign","sensorValue","SensorList","setInterval","forceUpdate","selectedSensors","reloading","selectedSensorsData","split","items","filter","FlatList","Object","keys","keyExtractor","refreshing","onRefresh","renderItem","includes","PureComponent","SensorsScreen","groupBy","array","prop","groups","val","done","fromDateTime","toDateTime","fetch","then","response","json","catch","error","notification","origin","JSON","stringify","navigationOptions","App","className","maxWidth","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","convertedVapidKey","base64String","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","charCodeAt","urlBase64ToUint8Array","process","ReactDOM","render","document","getElementById","URL","href","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","pushManager","getSubscription","existedSubscription","subscribe","applicationServerKey","userVisibleOnly","newSubscription","subscription","method","body","mode","Notification","permission"],"mappings":"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","file":"static/js/main.e3520504.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from 'moment';\nimport { TimeSeries } from \"pondjs\";\nimport { View, Text, Button } from 'react-native';\nimport { Resizable, styler, Legend, Charts, ChartContainer, ChartRow, YAxis, LineChart, EventMarker } from \"react-timeseries-charts\";\nimport DateTimePicker from 'react-datetime-picker';\n\nexport default class SensorsGraph extends React.Component {\n    series = [];\n    \n    constructor(props) {\n        super(props);\n        console.log('data',props.data);\n        console.log('sensorid',props.sensorid)\n        this.series = this.props.data.sensorData.map((sensor,i) => \n            new TimeSeries({\n                name: sensor.name,\n                columns: [\"time\", \"temperature\" + i],\n                points: sensor.data,\n                key: \"temperature\" + i\n            })\n        )\n    }\n\n    shouldComponentUpdate(nextProps) {\n        console.log('shouldComponentUpdate1', nextProps.data.lastUpdated);\n        console.log('shouldComponentUpdate2', this.props.data.lastUpdated);\n        console.log('will update', nextProps.data.lastUpdated !== this.props.data.lastUpdated);\n        console.log('will update2', nextProps.data.sensorData.length !== this.series.length);\n        return nextProps.data.lastUpdated !== this.props.data.lastUpdated || nextProps.data.length !== this.series.length;\n    }\n    \n    componentWillUpdate(nextProps, nextState) {\n        console.log('data',nextProps.data);\n        console.log('sensorid',nextProps.sensorid)\n        this.series = nextProps.data.sensorData.map((sensor,i) => \n            new TimeSeries({\n                name: sensor.name,\n                columns: [\"time\", \"temperature\" + i],\n                points: sensor.data,\n                key: \"temperature\" + i\n            })\n        )\n    } \n      \n    state = {\n        tracker: null,\n        trackerEvent: null,\n        hours: 6,\n        fromDate: moment(new Date()).subtract(6, 'hours').toDate(),\n        toDate: new Date(),\n    };\n\n    handleTrackerChanged = t => {\n        if (t) {\n            const tracker = [];\n            const trackerValue = [];\n            const trackerEvent = [];\n            this.series.map((item, i) => {\n                const e = item.atTime(t);\n                const eventTime = new Date(\n                    e.begin().getTime() + (e.end().getTime() - e.begin().getTime()) / 2\n                );\n                const eventValue = e.toPoint(['temperature'+i])[1];\n                const v = `${eventValue > 0 ? \"+\" : \"\"}${eventValue}°C`;\n\n                tracker.push(eventTime);\n                trackerValue.push(v);\n                trackerEvent.push(e);\n            })\n            this.setState({ tracker: tracker[0], trackerValue, trackerEvent});\n        } else {\n            this.setState({ tracker: null, trackerValue: null, trackerEvent: null });\n        }\n    };\n\n    setFromDate = (date) => {\n        date = date || this.state.fromDate;\n    \n        this.setState({\n            fromDate: date,\n        });\n    }\n    \n    setToDate = (date) => {\n        date = date || this.state.toDate;\n    \n        this.setState({\n            toDate: date,\n        });\n    }\n    \n    render() {\n        const categories = this.series.map((serie,i) => ({key:serie.meta(\"key\"), label:serie.name()}))\n        const style = styler(this.series.map((serie,i) => serie.meta(\"key\")), \"Paired\")\n        return (\n            <View style={{ flex: 1, flexGrow: 4 }}>\n                <View style={{ flexDirection: 'row', justifyContent:'space-between' }}>\n                    <View style={{ flexDirection: 'row', flex: 2 }}>\n                        {/*<Picker\n                            selectedValue={this.state.hours}\n                            style={{height: 50, width: 100}}\n                            onValueChange={(itemValue, itemIndex) =>\n                                this.setState({hours: itemValue}, this.props.reloadData(()=>{}, itemValue))\n                            }>\n                                {options.map((option) => <Picker.Item label={option.value} value={option.key} key={option.key} />)}\n                        </Picker> */}\n                        <View style={{ flexDirection: 'column', padding: '7px' }}>\n                            <Text>From date/time</Text>\n                            {<DateTimePicker value={this.state.fromDate}\n                                format=\"yyyy-MM-dd HH:mm\"\n                                locale=\"sv\"\n                                onChange={this.setFromDate} />}\n                        </View>\n                        <View style={{ flexDirection: 'column', padding: '7px' }}>\n                            <Text>To date/time</Text>\n                            {<DateTimePicker value={this.state.toDate}\n                                format=\"yyyy-MM-dd HH:mm\"\n                                locale=\"sv\"\n                                onChange={this.setToDate} />}\n                        </View>\n                        <Button style={{ alignItems: 'center', margin: '15px', padding: '15px' }} title=\"Update\" \n                                onPress={() => this.props.reloadData(()=>{}, this.state.hours, this.state.fromDate, this.state.toDate)} />\n                    </View>\n                    <View style={{ flexDirection: 'row', justifyContent:'flex-end', flex: 1, alignItems: 'flex-end' }}>\n                        <View style={{ justifyContent:'flex-end',alignItems: 'flex-end' }}>\n                            <Text key=\"0\">{this.state.tracker && moment(this.state.tracker).format('YYYY-MM-DD HH:mm')}</Text>\n                            <Text key=\"1\">{this.state.tracker && moment(this.state.tracker).format('ddd DD MMM, HH:mm')}</Text>\n                        </View>\n                    </View>\n                </View>\n                <Resizable style={{ padding: '10px 0px 10px 0px' }}>\n                    <ChartContainer\n                        title={this.props.sensorid}\n                        titleStyle={{ fill: \"#555\", fontWeight: 500 }}\n                        timeRange={this.series.reduce((acc, i) => acc.extents(i.range()), this.series[0].range())}\n                        format=\"%b '%y\"\n                        timeAxisTickCount={5}\n                        //trackerPosition={this.state.tracker}\n                        onTrackerChanged={this.handleTrackerChanged}\n                    >\n                        <ChartRow height={window.innerHeight-150}>\n                            <YAxis\n                                id=\"temperature\"\n                                label=\"Temp (°C)\"\n                                min={this.series.reduce((acc, i, idx) => Math.min(acc, i.min(\"temperature\"+idx)), 1000)}\n                                max={this.series.reduce((acc, i, idx) => Math.max(acc, i.max(\"temperature\"+idx)), -1000)}\n                                width=\"60\"\n                                format=\",.2f\"\n                            />\n                            <Charts>\n                                {this.series.map((serie, i) => <LineChart key={\"temperature\" + i} columns={[\"temperature\" + i]} axis=\"temperature\" series={serie} style={style} /> )}\n                                {this.series.map((serie, i) => <EventMarker\n                                    key={i}\n                                    type=\"point\"\n                                    axis=\"temperature\"\n                                    event={this.state.trackerEvent && this.state.trackerEvent[i]}\n                                    column={\"temperature\" + i}\n                                    markerLabel={this.state.trackerValue && this.state.trackerValue[i]}\n                                    markerLabelAlign=\"left\"\n                                    markerLabelStyle={{ fill: \"#2db3d1\", stroke: \"white\" }}\n                                    markerRadius={3}\n                                    markerStyle={{ fill: \"#2db3d1\" }}\n                                />)}\n                            </Charts>\n                        </ChartRow>\n                    </ChartContainer>\n                </Resizable>\n                <Legend categories={categories} type=\"dot\" style={style}/>\n            </View>\n        );\n    }\n}","import React from 'react';\nimport { Button, StyleSheet, Text, View } from 'react-native';\nimport moment from 'moment';\n\nexport default class SensorItem extends React.Component {\n\n  getUnitSign(type) {\n    switch (type) {\n      case \"temp\": return \"C\";\n      case \"humidity\": return \"%\";\n      case \"lum\": return \"L\";\n      case \"uv\": return \"UV\";\n      default: return \"N/A\";\n    }\n  }\n\n  epochToDateTime(epoch) {\n    const d = new Date(0);\n    d.setUTCSeconds(epoch / 1000);\n    return d.toLocaleDateString('sv-SE') + ' ' + d.toLocaleTimeString();\n  }\n\n  render() {\n    return (\n      <View\n        style={styles.option}>\n        <View style={{ flexDirection: 'column' }}>\n          <View style={{ flexDirection: 'row', justifyContent:'space-between'}}>\n            <View style={{ flexDirection: 'column' }}>\n              <Text style={styles.sensorName}>\n                {this.props.sensors[0].name.substring(0, 35) + (this.props.sensors[0].name.length > 35 ? \"...\" : \"\")}\n              </Text>\n              <Text style={styles.agoText}>\n                {moment(this.props.sensors[0].data.slice().reverse()[0][0]).fromNow()}\n              </Text>\n            </View>\n            <View style={{ flexDirection: 'row', justifyContent:'space-between', marginLeft: 5 }}>\n              {this.props.sensors.map((sensor, i) => {\n                return (\n                  <Button\n                    style={styles.valueButton}\n                    title={sensor.data.slice().reverse()[0][1] + this.getUnitSign(sensor.type)}\n                    key={sensor.type}\n                    color={this.props.buttonColorFunc(sensor)}\n                    onPress={this.props.onPress(sensor)}\n                  />)\n              })}\n            </View>\n          </View>\n        </View>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 15,\n  },\n  graph: {\n    left:     0,\n    top:      0,\n    position: 'absolute',\n    flex: 0.95\n  },\n  optionsTitleText: {\n    fontSize: 16,\n    marginLeft: 15,\n    marginTop: 9,\n    marginBottom: 12,\n  },\n  optionIconContainer: {\n    marginRight: 9,\n  },\n  option: {\n    backgroundColor: '#fdfdfd',\n    paddingHorizontal: 5,\n    paddingLeft: 10,\n    paddingRight: 10,\n    paddingVertical: 5,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderBottomColor: '#EDEDED',\n  },\n  sensorName: {\n    fontSize: 15,\n    marginTop: 1,\n    color: '#000000',\n    textAlign: 'left',\n  },\n  agoText: {\n    fontSize: 10,\n    marginTop: 1,\n    color: '#444444',\n    textAlign: 'left',\n  },\n  sensorValue: {\n    paddingHorizontal: '5px' // crashes the expo android app (!?!?)\n  },\n  valueButton: {\n    marginLeft: 3\n  }\n});\n","import React from 'react';\nimport { FlatList, View } from 'react-native';\nimport SensorsGraph from './SensorsGraph'\nimport SensorItem from './SensorItem'\n\nexport class SensorList extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    setInterval(() => {this.forceUpdate();}, 60000);\n    this.state = {\n      selectedSensors: [],\n      reloading: false\n    }\n  }\n\n  render() {\n    const selectedSensorsData = this.state.selectedSensors.map(key => {\n      var sensorid = key.split(':')[0];\n      var type = key.split(':')[1];\n      var sensor = this.props.sensorData.items[sensorid].filter(sensor => sensor.type === type)[0] ;\n      console.log('sensorid',sensorid);\n      console.log('sensor', sensor);\n      return {\n        data: sensor.data, \n        sensorid: sensor.sensorid, \n        type: sensor.type, \n        name: sensor.name + \"(\" + (sensor.type === 'temp' ? \"C\" : \"%\") + \")\"\n      }\n    });\n\n    return (\n      <View style={{ flexDirection: 'row', flex: 1, alignItems: 'stretch' }}>\n        <FlatList data={Object.keys(this.props.sensorData.items)}\n                  keyExtractor={item => item}\n                  style={{ flexGrow: 1 }}\n                  refreshing={this.state.reloading}\n                  onRefresh={() => this.setState({reloading: true}, this.props.reloadData(() => this.setState({reloading:false})))}\n                  renderItem={({item}) => \n          <SensorItem buttonColorFunc={(sensor) => this.state.selectedSensors.includes(sensor.sensorid + \":\" + sensor.type) ?\n                            '#FF0000' : '#0000FF'}\n              sensors={this.props.sensorData.items[item]} onPress={(sensor) => () =>\n                {\n                  if (this.state.selectedSensors.includes(sensor.sensorid + \":\" + sensor.type)) {\n                    var selectedSensors = this.state.selectedSensors.filter(i => i !== sensor.sensorid + \":\" + sensor.type);\n                    this.setState({selectedSensors})\n                  } else {\n                    var sensors = this.state.selectedSensors.slice();\n                    sensors.push(sensor.sensorid + \":\" + sensor.type);\n                    this.setState({selectedSensors: sensors})\n                  }\n                }\n              }\n            />\n          }\n        />\n        {selectedSensorsData.length > 0 &&\n          <SensorsGraph data={{sensorData: selectedSensorsData, lastUpdated: this.props.sensorData.lastUpdated}} \n                        reloadData={this.props.reloadData}/>\n        }\n      </View>\n    )\n  }\n}","import React from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\nimport { SensorList } from './SensorList';\n\nexport default class SensorsScreen extends React.Component {\n  static navigationOptions = {\n    title: 'Sensors'\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      sensorData: {\n        items: [],\n        lastUpdated: new Date()\n      }\n    }\n  }\n\n  groupBy = (array, prop) => {\n    return array.reduce(function(groups, item) {\n      const val = item[prop]\n      groups[val] = groups[val] || []\n      groups[val].push(item)\n      return groups\n    }, {})\n  }\n\n  reloadData = (done, fromDateTime = new Date(new Date().getTime() - (6*3600*1000)), toDateTime = new Date()) => {\n    console.log('reloadData', fromDateTime, toDateTime);\n//    fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues?fromDateTime=${parseInt(fromDateTime.getTime()/1000,10)}&toDateTime=${parseInt(toDateTime.getTime()/1000,10)}`)\n    fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues?from=6`)\n    .then(response => response.json())\n    .then(json => this.setState({sensorData: {items: this.groupBy(json.series, 'sensorid'), lastUpdated: new Date()}}, done))\n    .catch((error) =>{\n      console.error('ERROR',error);\n      done();\n    });\n  }\n\n  componentDidMount() {\n    this.reloadData(() => {});\n  }\n\n  render() {\n    return (\n        <View style={{ flexDirection: 'column', flex: 1, width: \"100%\" }}>\n          {this.state.sensorData &&\n            <SensorList reloadData={this.reloadData} sensorData={this.state.sensorData}/>\n          }\n          {\n            this.props.notification &&\n            <View style={{ justifyContent: 'center', alignItems: 'center' }}>\n                <Text>Origin: {this.props.notification.origin}</Text>\n                <Text>Data: {JSON.stringify(this.props.notification.data)}</Text>\n            </View>\n          }\n      </View>\n    );\n  }\n}\n","import React from 'react';\n//import logo from './logo.svg';\nimport SensorScreen from './SensorScreen';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{ flex: 1, alignItems: 'stretch', maxWidth: 400 }}>\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      </header>\n      <SensorScreen />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swFileName = process.env.NODE_ENV === 'production' \n        ? 'service-worker.js' \n        : 'custom-sw.js'\n      const swUrl = `${process.env.PUBLIC_URL}/${swFileName}`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const convertedVapidKey = urlBase64ToUint8Array(process.env.REACT_APP_PUBLIC_VAPID_KEY)\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4)\n  // eslint-disable-next-line\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\")\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\nfunction sendSubscription(subscription) {\n  return fetch(`${process.env.REACT_APP_API_URL}/dev/subscription`, {\n    method: 'POST',\n    body: JSON.stringify(subscription),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    mode: 'no-cors'\n  })\n}\n\nexport function subscribeUser() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function(registration) {\n      if (!registration.pushManager) {\n        console.log('Push manager unavailable.')\n        return\n      }\n\n      registration.pushManager.getSubscription().then(function(existedSubscription) {\n        if (existedSubscription === null) {\n          console.log('No subscription detected, make a request.')\n          registration.pushManager.subscribe({\n            applicationServerKey: convertedVapidKey,\n            userVisibleOnly: true,\n          }).then(function(newSubscription) {\n            console.log('New subscription added.')\n            sendSubscription(newSubscription)\n          }).catch(function(e) {\n            if (Notification.permission !== 'granted') {\n              console.log('Permission was not granted.')\n            } else {\n              console.error('An error ocurred during the subscription process.', e)\n            }\n          })\n        } else {\n          console.log('Existed subscription detected.')\n        }\n      })\n    })\n      .catch(function(e) {\n        console.error('An error ocurred during Service Worker registration.', e)\n      })\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as subscription from './subscription';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\nsubscription.subscribeUser();\n"],"sourceRoot":""}