{"version":3,"sources":["utils/applogs.js","service/sensorValues.js","SensorValueListDialog.tsx","ValueButton.tsx","SensorItem.tsx","service/sensors.ts","SensorList.tsx","SensorFavourites.tsx","SensorScreen.tsx","NotificationEventsGroup.tsx","NotificationEventsMenuItem.tsx","ApplicationLogsMenuItem.tsx","SensorManagmentItem.tsx","SensorsMenuItem.tsx","MenuBar.tsx","App.tsx","serviceWorker.js","subscription.tsx","index.js"],"names":["getItem","item","localStorage","addLog","label","obj","logs","JSON","parse","push","id","length","message","newLogs","stringify","setItem","clear","loadSensorValues","options","queryKey","console","log","interval","from","sensorId","valueResolution","to","vrParam","sParam","url","fetch","then","response","json","array","prop","items","series","reduce","groups","val","lastUpdated","Date","catch","error","SensorValueListDialog","properties","sensor","open","onClose","React","useState","setValueResolution","currentSensor","setCurrentSensor","enabled","setEnabled","setInterval","queryKeyValues","sensorid","queryOptions","cacheTime","staleTime","useQuery","data","newSensorResult","isLoading","useEffect","newSensor","filter","s","type","epochToTime","epoch","d","setUTCSeconds","toLocaleTimeString","stringFormatOptions","minimumFractionDigits","maximumFractionDigits","Dialog","aria-labelledby","DialogTitle","name","FormControl","InputLabel","Select","labelId","value","onChange","event","date","target","fromDate","setMonth","getMonth","toLocaleDateString","setDate","getDate","MenuItem","List","Skeleton","variant","width","height","map","entry","idx","secondary","toLocaleString","undefined","ListItem","button","onClick","key","ListItemText","primary","tempColor","teal","humidityColor","indigo","uvColor","blueGrey","lumColor","pink","defaultColor","grey","getColor","getUnitSign","ValueButton","sensorProp","setOpen","formatOptions","Button","style","backgroundColor","slice","reverse","maxWidth","useStyles","makeStyles","root","paddingTop","paddingBottom","fromBattery","SensorItem","classes","sensors","className","substring","moment","fromNow","battery","display","flexDirection","size","chunks","chunk","collection","iteratee","loadSensors","updateSensor","headers","method","body","theme","palette","background","paper","skeleton","Grid","container","spacing","xs","start","contents","sensorData","mutation","favouriteSensors","keys","Object","sort","a","b","localeCompare","predicate","includes","swipeRight","content","action","mutate","isFavourite","SensorList","queryClient","useQueryClient","useMutation","onSuccess","invalidateQueries","setFavouriteSensors","flexGrow","marginTop","marginBottom","padding","textAlign","color","text","fontSize","fontWeight","position","clearIcon","right","top","sensorName","Paper","SensorsFavourites","SensorsScreen","refetchInterval","Container","optionLabels","1","2","4","24","NotificationEventsGroup","eventsList","handleClickEvents","sensorMutation","snoozedColor","setValue","radioGroupRef","useRef","openSnooze","setOpenSnooze","now","getTime","snoozeButtonColor","snoozeUntil","firstSensorValue","latestSensorValue","getSnoozeUntil","Fragment","Accordion","AccordionSummary","expandIcon","aria-controls","alignItems","timestamp","stopPropagation","onFocus","AccordionDetails","disableBackdropClick","disableEscapeKeyDown","onEntering","current","DialogContent","dividers","RadioGroup","ref","aria-label","parseInt","option","FormControlLabel","control","Radio","DialogActions","autoFocus","NotificationEventsMenuItem","openEvents","setOpenEvents","notificationEvents","fullWidth","ApplicationLogsMenuItem","openLogs","setOpenLogs","logrow","SensorManagmentItem","setIsFavourite","notificationEnabled","setNotificationEnabled","FormGroup","Checkbox","checked","SensorsMenuItem","openSensors","setOpenSensors","sortedSensors","useMemo","_","sortBy","menuButton","marginRight","title","dialog2","minWidth","MenuBar","anchorEl","setAnchorEl","Boolean","handleClose","AppBar","Toolbar","IconButton","edge","aria-haspopup","currentTarget","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","QueryClient","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","convertedVapidKey","base64String","repeat","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","urlBase64ToUint8Array","process","ReactDOM","render","client","CssBaseline","document","getElementById","URL","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","pushManager","getSubscription","existedSubscription","subscribe","applicationServerKey","userVisibleOnly","newSubscription","subscription","mode","e","Notification","permission"],"mappings":"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","file":"static/js/main.6381c4b4.chunk.js","sourcesContent":["function getItem() {\n    const item = localStorage.getItem('logs');\n    if (item === null) {\n        return '[]';\n    } else {\n        return item;\n    }\n}\n\nexport function addLog(label, obj) {\n    const item = getItem();\n    const logs = JSON.parse(item || []);\n    if (obj) {\n        logs.push({id: logs.length, message:`${label}: ${obj}`});\n    } else {\n        logs.push({id: logs.length, message:`${label}`});\n    }\n    const newLogs = JSON.stringify(logs);\n    localStorage.setItem('logs', newLogs);\n}\n\nexport function logs() {\n    const item = getItem();\n    return JSON.parse(item);\n}\n\nexport function clear() {\n    localStorage.setItem('logs', '[]');\n}","import { addLog } from '../utils/applogs';\n\nexport const loadSensors = () => {\n  addLog('loadSensors()');\n  return fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensor`)\n    .then(response => response.json())\n    .then(data => {\n      console.log('loadSensors(1)', data);\n      return data.sensors;\n    })\n    .catch((error) => {\n      console.error('ERROR', error);\n    });\n}\n\nexport const updateSensor = ({ sensorId, isFavourite }) => {\n  addLog('unmarkSensorAsFavourite: ', sensorId);\n  return fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensor/${sensorId}`,\n    {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'PATCH',\n      body: JSON.stringify({ isFavourite })\n    }\n  )\n    .then(response => response.json())\n    .catch((error) => {\n      console.error('ERROR', error);\n    });\n};\n\nconst groupBy = (array, prop) => {\n  return array.reduce(function (groups, item) {\n    const val = item[prop]\n    groups[val] = groups[val] || []\n    groups[val].push(item)\n    return groups\n  }, {})\n}\n\nexport const loadSensorValues = (options) => {\n  const { queryKey } = options;\n  console.log('loadSensorValues.options', options);\n  console.log('loadSensorValues.queryKey', queryKey);\n\n  const [_, { \n    sensorId = null, \n    valueResolution = null, \n    interval : {\n      from = '6',\n      to = ''\n    }\n//    fromDateTime = new Date(new Date().getTime() - (6 * 3600 * 1000)), \n//    toDateTime = new Date()\n  } = { interval: {from:'6'}}] = queryKey;\n\n  console.log('loadSensorValues.valueResolution', valueResolution);\n  //addLog('loadSensorValues', fromDateTime, toDateTime);\n  const vrParam = `${valueResolution ? `&resolution=${valueResolution}` : ''}`;\n  const sParam = `${sensorId ? `&sensorId=${sensorId}` : ''}`;\n  const url = 'https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues?'\n  + `from=${from}`\n  + `&to=${to}`\n  + vrParam\n  + sParam;\n\n  console.log('loadSensorValues.url', url);\n\n  // return fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensorValues${sensorId != null ? `/${sensorId}` : ''}?from=6${valueResolution != null ? `&resolution=${valueResolution}` : ''}`)\n  return fetch(url)\n    .then(response => response.json())\n    .then(json => {\n      const items = groupBy(json.series, 'sensorid');\n      console.log('loadSensorValues.items', items);\n      return {\n        items,\n        lastUpdated: new Date()\n      };\n    })\n    .catch((error) => {\n      console.error('ERROR', error);\n    });\n}","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { loadSensorValues } from './service/sensorValues'\nimport { useQuery } from 'react-query';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nexport default function SensorValueListDialog(properties: { sensor: SensorWithValue, open: boolean, onClose: () => void }) {\n  const {\n    sensor,\n    open,\n    onClose\n  } = properties;\n\n  const [valueResolution, setValueResolution] = React.useState('15minutes');\n  const [currentSensor, setCurrentSensor] = React.useState(sensor);\n  const [enabled, setEnabled] = React.useState(false);\n  const [interval, setInterval] = React.useState({from: '6', to: ''});\n\n  const queryKeyValues = { sensorId: currentSensor.sensorid, valueResolution, interval };\n  const queryOptions = { enabled, cacheTime: 1000 * 5 * 60, staleTime: 1000 * 5 * 60 };\n\n  const { \n    data: newSensorResult = null, \n    isLoading \n  } = useQuery(['loadCurrentSensorValues', queryKeyValues], loadSensorValues, queryOptions);\n\n  React.useEffect(() => {\n    if (newSensorResult !== null) {\n      const sensors = newSensorResult['items'][currentSensor.sensorid];\n      const newSensor = sensors.filter((s: SensorWithValue) => s.type === currentSensor.type)[0];\n      setCurrentSensor(newSensor);\n    }\n  }, [currentSensor, newSensorResult]);\n\n  const handleChange = (event: any) => {\n    const date = new Date();\n\n    switch (event.target.value as string) {\n      case 'day': {\n        const fromDate = new Date(new Date().setMonth(date.getMonth()-1));\n        setInterval({from: fromDate.toLocaleDateString('sv-se'), to: date.toLocaleDateString('sv-se')});\n        break;\n      }\n      case 'hour': {\n        const fromDate = new Date(new Date().setDate(date.getDate()-3));\n        setInterval({from: fromDate.toLocaleDateString('sv-se') + '-00', to: date.toLocaleDateString('sv-se') + '-23'});\n        break;\n      }\n      default: {\n        setInterval({from: '6', to: ''});\n        break;\n      }\n    };\n    setValueResolution(event.target.value);\n    setEnabled(true);\n  };\n\n  // const epochToDateTime = (epoch) => {\n  //   const d = new Date(0);\n  //   d.setUTCSeconds(epoch / 1000);\n  //   return d.toLocaleDateString('sv-SE') + ' ' + d.toLocaleTimeString();\n  // }\n\n  // const epochToDate = (epoch: number) => {\n  //   const d = new Date(0);\n  //   d.setUTCSeconds(epoch / 1000);\n  //   return d.toLocaleDateString('sv-SE');\n  // }\n\n  const epochToTime = (epoch: number) => {\n    const d = new Date(0);\n    d.setUTCSeconds(epoch / 1000);\n    return d.toLocaleTimeString();\n  }\n\n  const stringFormatOptions = { minimumFractionDigits: 2, maximumFractionDigits: 2 };\n\n  return (\n    <Dialog onClose={onClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n      <DialogTitle id=\"simple-dialog-title\">{currentSensor.name + ' (' + currentSensor.type + ')'}</DialogTitle>\n      <FormControl>\n        <InputLabel id=\"demo-simple-select-label\">Resolution</InputLabel>\n        <Select\n          labelId=\"value-resolution-label\"\n          id=\"value-resolution-select\"\n          value={valueResolution}\n          onChange={handleChange}\n        >\n          <MenuItem value={'15minutes'}>15 minutes</MenuItem>\n          <MenuItem value={'hour'}>Hourly</MenuItem>\n          <MenuItem value={'day'}>Daily</MenuItem>\n        </Select>\n      </FormControl>\n      <List>\n        {isLoading && \n        <Skeleton variant=\"rect\" width={166} height={128} />\n        }\n        {!isLoading && currentSensor && currentSensor.data && currentSensor.data.map((entry, idx) => {\n          if (valueResolution === 'day') {\n            const secondary = (entry[2] && entry[3] && <>\n              <b>Min: </b>{entry[2].toLocaleString(undefined, stringFormatOptions)}\n              <br />\n              <b>Max: </b>{entry[3].toLocaleString(undefined, stringFormatOptions)}\n            </>);\n            console.log('day', currentSensor);\n            return (\n              <ListItem button onClick={() => {setValueResolution('hour'); setInterval({from: entry[0] + '-00', to: entry[0] + '-23'});}} key={idx}>\n                <ListItemText primary={entry[0]} secondary={secondary}/>&nbsp;\n                <ListItemText primary={entry[1].toLocaleString(undefined, stringFormatOptions)} />\n              </ListItem>\n            );\n          } else if (valueResolution === 'hour') {\n            const secondary = (entry[2] && entry[3] && <>\n              <b>Min: </b>{entry[2].toLocaleString(undefined, stringFormatOptions)}\n              <br />\n              <b>Max: </b>{entry[3].toLocaleString(undefined, stringFormatOptions)}\n            </>);\n            return (\n              <ListItem button onClick={onClose} key={idx}>\n                <ListItemText primary={entry[0]} secondary={secondary}/>&nbsp;\n                <ListItemText primary={entry[1].toLocaleString(undefined, stringFormatOptions)} />\n              </ListItem>\n            );\n          }\n          return (\n            <ListItem button onClick={onClose} key={idx}>\n              <ListItemText primary={epochToTime(entry[0])} />\n              <ListItemText primary={entry[1].toLocaleString(undefined, stringFormatOptions)} />\n            </ListItem>\n          );\n        })}\n      </List>\n    </Dialog>\n  )\n}","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { blueGrey, pink, teal, indigo, grey } from '@material-ui/core/colors';\nimport SensorValueListDialog from './SensorValueListDialog';\n\nconst tempColor = teal[\"400\"];\nconst humidityColor = indigo[\"400\"];\nconst uvColor = blueGrey[\"400\"];\nconst lumColor = pink[\"400\"];\nconst defaultColor = grey[\"400\"];\n\nconst getColor = (value: any, type: string) => {\n  switch (type) {\n    case 'temp': return tempColor;\n    case 'humidity': return humidityColor;\n    case 'uv': return uvColor;\n    case 'lum': return lumColor;\n    default: return defaultColor;\n  }\n}\n\nconst getUnitSign = (type: string) => {\n  switch (type) {\n    case \"temp\": return \"C\";\n    case \"humidity\": return \"%\";\n    case \"lum\": return \"L\";\n    case \"uv\": return \"UV\";\n    default: return \"N/A\";\n  }\n}\n\nexport default function ValueButton(sensorProp: { sensor: SensorWithValue }) {\n  const sensor = sensorProp.sensor;\n\n  const [open, setOpen] = React.useState(false);\n\n  const onClose = () => {\n    setOpen(false);\n  };\n\n  const formatOptions = sensor.type === 'temp' \n    ? {minimumFractionDigits: 1, maximumFractionDigits: 1}\n    : {minimumFractionDigits: 0, maximumFractionDigits: 0};\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        key={sensor.type}\n        style={{ backgroundColor: getColor(sensor.data.slice().reverse()[0][1], sensor.type), maxWidth: 64 }}\n        onClick={() => setOpen(true)}\n      >{sensor.data.slice().reverse()[0][1].toLocaleString(undefined, formatOptions) + getUnitSign(sensor.type)}\n      </Button>\n      <SensorValueListDialog sensor={sensor} open={open} onClose={onClose} />\n    </>\n  )\n}","import React from 'react';\nimport moment from 'moment';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Chunk, Map } from 'react-lodash';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ValueButton from './ValueButton'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n}));\n\nconst fromBattery = (value: number) => {\n  switch (value) {\n    case 253: return '(battery Ok)';\n    case 254: return '';\n    case 255: return '(battery LOW)';\n    default: return '';\n  }\n}\n\nexport default function SensorItem(properties: {sensors: SensorWithValue[]}) {\n  const classes = useStyles();\n  const { sensors } = properties;\n\n  return (\n    <ListItem className={classes.root}>\n      <ListItemText\n        primary={sensors[0].name.substring(0, 35) + (sensors[0].name.length > 35 ? \"...\" : \"\")}\n        secondary={moment(sensors[0].data.slice().reverse()[0][0]).fromNow() + ' ' + fromBattery(sensors[0].battery)} />\n\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        <Chunk array={sensors} size={2}>\n          {(chunks: SensorWithValue[]) =>\n            chunks.map((chunk, idx) =>\n              <div key={idx}>\n                <Map collection={chunk} iteratee={(sensor: SensorWithValue) =>\n                  <ValueButton sensor={sensor} key={sensor.type} />\n                } />\n              </div>\n            )\n          }\n        </Chunk>\n      </div>\n    </ListItem>\n  )\n}\n","import { addLog } from '../utils/applogs';\n\nexport const loadSensors = () => {\n  addLog('loadSensors()');\n  return fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensor`)\n    .then(response => response.json())\n    .then(data => {\n      console.log('loadSensors(1)', data);\n      return data.sensors;\n    })\n    .catch((error) => {\n      console.error('ERROR', error);\n    });\n}\n\nexport const updateSensor = (sensor: Partial<Sensor>) => {\n  const { sensorId } = sensor;\n  addLog('updateSensor: ', sensorId);\n  return fetch(`https://3gzxlzr6d4.execute-api.us-east-1.amazonaws.com/dev/sensor/${sensorId}`,\n    {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'PATCH',\n      body: JSON.stringify(sensor)\n    }\n  )\n    .then(response => response.json())\n    .catch((error) => {\n      console.error('ERROR', error);\n    });\n};\n","import React from 'react';\nimport SensorItem from './SensorItem'\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  SwipeableList,\n  SwipeableListItem\n} from '@sandstreamdev/react-swipeable-list';\nimport '@sandstreamdev/react-swipeable-list/dist/styles.css';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport Grid from '@material-ui/core/Grid';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { Map, Range, Filter } from 'react-lodash';\nimport { useMutation, useQueryClient, useQuery, UseMutationResult } from 'react-query';\nimport { updateSensor, loadSensors } from './service/sensors';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 440,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nconst skeleton = () => {\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={12}>\n        <Grid container spacing={1}>\n          <Range start={10}>\n            {(array: string[]) =>\n              <Map collection={array} iteratee={(id: string) =>\n                <Grid item xs={12} key={id}>\n                  <Skeleton variant=\"rect\" width={'100%'} height={56} />\n                </Grid>\n              } />\n            }\n          </Range>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst contents = (sensorData: SensorData, classes: { root: string }, mutation: UseMutationResult<any, unknown, Partial<Sensor>, unknown>, favouriteSensors: string[]) => {\n  const keys = Object.keys(sensorData.items)\n    .sort((a, b) => sensorData.items[a][0].name.localeCompare(sensorData.items[b][0].name));\n\n  const swipeRightOptions = (sensorId: string) => ({\n    content: <FavoriteIcon />,\n    action: () => mutation.mutate({ sensorId, isFavourite: true })\n  });\n\n  return (\n    <div className={classes.root}>\n      <SwipeableList>\n        <Filter collection={keys} predicate={(key: string) => !favouriteSensors.includes(key)}>\n          {(sensors: string) =>\n            <Map collection={sensors} iteratee={(item: string) =>\n              <SwipeableListItem key={item} swipeRight={swipeRightOptions(item)} >\n                <SensorItem sensors={sensorData.items[item]} />\n              </SwipeableListItem>\n            } />\n          }\n        </Filter>\n      </SwipeableList>\n    </div>\n  );\n}\n\nexport default function SensorList(properties: { sensorData: SensorData, isLoading: boolean }) {\n  const { sensorData, isLoading } = properties;\n\n  const classes = useStyles();\n\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation(updateSensor, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('loadSensors')\n    },\n  });\n\n  const { data: sensors = [] } = useQuery('loadSensors', loadSensors);\n  const [favouriteSensors, setFavouriteSensors] = React.useState([] as string[]);\n\n  React.useEffect(() => {\n    setFavouriteSensors(\n      sensors.filter((sensor: Sensor) => sensor.isFavourite)\n        .map((sensor: Sensor) => `${sensor.sensorId}`)\n    );\n  }, [sensors]);\n\n  if (isLoading) {\n    return skeleton();\n  } else {\n    return contents(sensorData, classes, mutation, favouriteSensors);\n  }\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport ValueButton from './ValueButton';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Map } from 'react-lodash';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { useQuery, useMutation, useQueryClient, UseMutationResult } from 'react-query';\nimport { loadSensors, updateSensor } from './service/sensors';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    maxWidth: 440,\n    marginTop: 10,\n    marginBottom: 10\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    fontSize: 16,\n    fontWeight: 700,\n    position: 'relative'\n  },\n  clearIcon: {\n    color: '#DDDDDD',\n    position: 'absolute',\n    right: 2,\n    top: 2,\n    '&:hover': {\n      color: '#444444',\n    },\n  },\n  sensorName: {\n    marginTop: 0\n  }\n}));\n\nconst skeleton = () => {\n  return (\n    <>\n      <Grid item xs={6} key={1}>\n        <Skeleton variant=\"rect\" width={166} height={128} />\n      </Grid>\n      <Grid item xs={6} key={2}>\n        <Skeleton variant=\"rect\" width={166} height={128} />\n      </Grid>\n    </>\n  );\n};\n\ninterface classes {\n  root: string,\n  paper: string,\n  clearIcon: string,\n  sensorName: string\n}\n\nconst contents = (classes: classes, favouriteSensors: string[], sensorData: SensorData, mutation: UseMutationResult<any, unknown, Partial<Sensor>, unknown>) => {\n  return (\n    <Map collection={favouriteSensors} iteratee={(sensorId: string) =>\n      <Grid item xs={6} key={sensorId}>\n        <Paper className={classes.paper}>\n          <ClearIcon className={classes.clearIcon} onClick={() => mutation.mutate({ sensorId, isFavourite: false })} />\n          <p className={classes.sensorName}>\n            {sensorData.items[sensorId] && sensorData.items[sensorId][0].name}\n          </p>\n          <div>\n            <Map collection={sensorData.items[sensorId]} iteratee={(sensor:SensorWithValue) =>\n              ['temp', 'humidity'].includes(sensor.type) ? <ValueButton sensor={sensor} key={sensor.type} /> : ''\n            } />\n          </div>\n        </Paper>\n      </Grid>\n    } />\n  );\n};\n\nexport default function SensorsFavourites(properties: { sensorData: SensorData, isLoading: boolean }) {\n  const { sensorData, isLoading } = properties;\n  const queryClient = useQueryClient();\n\n  const { data: sensors = [] } = useQuery('loadSensors', loadSensors);\n  const mutation = useMutation(updateSensor, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('loadSensors')\n    },\n  });\n\n  const [favouriteSensors, setFavouriteSensors] = React.useState([]);\n\n  React.useEffect(() => {\n    setFavouriteSensors(\n      sensors.filter((sensor: Sensor) => sensor.isFavourite)\n        .map((sensor: Sensor) => sensor.sensorId)\n    );\n  }, [sensors]);\n\n  const classes = useStyles();\n\n  return (\n    <Grid id=\"favourites\" container spacing={3} className={classes.root}>\n      <Grid item xs={12}>\n        <Grid container spacing={1}>\n          {isLoading ? skeleton() : contents(classes, favouriteSensors, sensorData, mutation)}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport SensorList from './SensorList';\nimport SensorsFavourites from './SensorFavourites';\nimport Container from '@material-ui/core/Container';\nimport { loadSensorValues } from './service/sensorValues';\nimport { useQuery } from 'react-query';\n\nexport default function SensorsScreen() {\n  const {\n    data: sensorData = { items: [], lastUpdated: new Date() },\n    isLoading\n  } = useQuery('loadSensorValues', loadSensorValues, { refetchInterval: 60000 });\n\n  return (\n    <Container maxWidth=\"sm\">\n      <SensorsFavourites sensorData={sensorData} isLoading={isLoading} />\n      <SensorList sensorData={sensorData} isLoading={isLoading} />\n    </Container>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Map } from 'react-lodash';\nimport SnoozeIcon from '@material-ui/icons/Snooze';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport moment from 'moment';\nimport { teal } from '@material-ui/core/colors';\nimport { UseMutationResult } from 'react-query';\n\nconst optionLabels: {[key: number]: string} = {\n  1: '1 hour',\n  2: '2 hours',\n  4: '4 hours',\n  24: '24 hours'\n}\nconst options = [1, 2, 4, 24];\n\nexport default function NotificationEventsGroup(properties: { eventsList:NotificationEvent[], handleClickEvents: () => void, sensorMutation: UseMutationResult<any, unknown, Partial<Sensor>, unknown>, sensor: Sensor }) {\n  const { \n    eventsList, \n    handleClickEvents, \n    sensorMutation, \n    sensor \n  } = properties;\n  const snoozedColor = teal[\"400\"];\n\n  const epochToTime = (epoch: number) => {\n    const d = new Date(0);\n    d.setUTCSeconds(epoch / 1000);\n    return d.toLocaleTimeString();\n  }\n\n  const valueProp = 1;\n  const [value, setValue] = React.useState<number>(valueProp);\n  const radioGroupRef = React.useRef<React.RefObject<HTMLInputElement> | null>(null);\n  const [openSnooze, setOpenSnooze] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!openSnooze) {\n      setValue(valueProp);\n    }\n  }, [valueProp, openSnooze]);\n\n  const handleSnooze = () => {\n    setOpenSnooze(true);\n  }\n\n  const handleEntering = () => {\n    if (radioGroupRef.current != null) {\n      console.log('handleEntering', typeof radioGroupRef.current);\n      // radioGroupRef.current.focus();\n    }\n  };\n\n  const handleCancel = () => {\n    setOpenSnooze(false);\n  };\n\n  const handleOk = () => {\n    setOpenSnooze(false);\n    sensorMutation.mutate({ sensorId: eventsList[0].sensorId, snoozeUntil: new Date().getTime() + (1000 * value * 60 * 60) });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(parseInt(event.target.value));\n  };\n\n  const now = new Date().getTime();\n\n  const snoozeButtonColor = sensor.snoozeUntil || 0 > now\n    ? snoozedColor\n    : 'black';\n\n  const firstSensorValue = eventsList[0];\n  const latestSensorValue = [...eventsList].reverse()[0];\n\n  const getSnoozeUntil = (sensor: Sensor): number => {\n    return sensor.snoozeUntil || 0;\n  }\n\n  return (\n    <React.Fragment>\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"content\"\n          id=\"header\"\n        >\n          <Grid container spacing={0} alignItems=\"center\">\n            <Grid item xs={11}>\n              <ListItemText primary={firstSensorValue.name} secondary={epochToTime(latestSensorValue.timestamp)} />\n            </Grid>\n            <Grid item xs={1}>\n              <SnoozeIcon\n                style={{ color: snoozeButtonColor }}\n                onClick={(event) => { event.stopPropagation(); handleSnooze(); }}\n                onFocus={(event) => event.stopPropagation()}\n              />\n            </Grid>\n          </Grid>\n        </AccordionSummary>\n        <AccordionDetails>\n          <List>\n            <Map collection={eventsList} iteratee={(entry: NotificationEvent) =>\n              <ListItem button onClick={handleClickEvents} key={`${entry.sensorId}-${entry.timestamp}`}>\n                <ListItemText secondary={epochToTime(entry.timestamp)} primary={entry.message} />\n              </ListItem>\n            } />\n          </List>\n        </AccordionDetails>\n      </Accordion>\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        maxWidth=\"xs\"\n        onEntering={handleEntering}\n        aria-labelledby=\"confirmation-dialog-title\"\n        open={openSnooze}\n      >\n        <DialogTitle id=\"confirmation-dialog-title\">Snooze For</DialogTitle>\n        <DialogContent dividers>\n          {/* {sensor.snoozeUntil || 0 > now && `Active again ${moment((sensor.snoozeUntil || 0)).fromNow()}.`} */}\n          {getSnoozeUntil(sensor) > now && `Active again ${moment(getSnoozeUntil(sensor)).fromNow()}.`}\n          <RadioGroup\n            ref={radioGroupRef}\n            aria-label=\"snooze-for\"\n            name=\"snooze-for\"\n            value={value}\n            onChange={handleChange}\n          >\n            {options.map((option) => (\n              <FormControlLabel value={option} key={option} control={<Radio />} label={optionLabels[option]} />\n            ))}\n          </RadioGroup>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleCancel} color=\"primary\">\n            Cancel\n        </Button>\n          <Button onClick={handleOk} color=\"primary\">\n            Ok\n        </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  )\n}","import React from 'react';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport List from '@material-ui/core/List';\nimport { Map, GroupBy } from 'react-lodash';\nimport { addLog } from './utils/applogs';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport NotificationEventsGroup from './NotificationEventsGroup';\nimport { loadSensors, updateSensor } from './service/sensors';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport Grid from '@material-ui/core/Grid';\n\nconst skeleton = () => {\n  return (\n    <Grid container spacing={1} alignItems=\"center\">\n      <Map collection={[1, 2, 3]} iteratee={(idx: number) =>\n        <Grid item xs={12}>\n          <Skeleton key={idx} variant=\"rect\" width={309} height={80} />\n        </Grid>\n      } />\n    </Grid>\n  );\n}\n\nexport default function NotificationEventsMenuItem(properties: { onClose: () => void }) {\n  const { onClose} = properties;\n  const [openEvents, setOpenEvents] = React.useState(false);\n\n  const handleClickEvents = () => {\n    setOpenEvents(false);\n    onClose();\n  };\n\n  const reloadData = () => {\n    addLog('reloadData');\n    return fetch(`https://aoq53tdls8.execute-api.us-east-1.amazonaws.com/dev/sensorNotificationEvent`)\n      .then(response => response.json())\n      .catch((error) => {\n        console.error('ERROR', error);\n      });\n  }\n\n  const handleOpenEvents = () => {\n    setOpenEvents(true);\n  };\n\n  const { data: notificationEvents = [], isLoading } = useQuery('loadNotificationEvents', reloadData, { refetchInterval: 60000 });\n\n  const queryClient = useQueryClient()\n  const { data: sensors } = useQuery('loadSensors', loadSensors);\n  const mutation = useMutation(updateSensor, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('loadSensors')\n    },\n  });\n\n  return (\n    <React.Fragment>\n      <MenuItem onClick={handleOpenEvents}>\n        Notification Events\n      </MenuItem>\n      <Dialog onClose={handleClickEvents} aria-labelledby=\"simple-dialog-title\" open={openEvents} fullWidth={true} maxWidth={'xs'}>\n        <DialogTitle id=\"simple-dialog-title\">Notification Events</DialogTitle>\n        <List>\n          {isLoading && skeleton()}\n          {!isLoading &&\n            <GroupBy collection={notificationEvents} iteratee={(entry: NotificationEvents) => entry.sensorId}>\n              {(value: NotificationEvents) =>\n                <Map collection={Object.keys(value)} iteratee={(sensorId: string) =>\n                  <NotificationEventsGroup\n                    eventsList={value[sensorId]}\n                    handleClickEvents={handleClickEvents}\n                    key={sensorId}\n                    sensorMutation={mutation}\n                    sensor={sensors && sensors.filter((item:Sensor) => `${item.sensorId}` === sensorId)[0]}\n                  />\n                } />\n              }\n            </GroupBy>\n          }\n        </List>\n      </Dialog>\n    </React.Fragment>\n  )\n}","import React from 'react';\n\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport List from '@material-ui/core/List';\nimport { Map } from 'react-lodash';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { logs, clear } from './utils/applogs';\nimport Clear from '@material-ui/icons/Clear';\n\n\nexport default function ApplicationLogsMenuItem(properties: { onClose: () => void }) {\n  const {\n    onClose\n  } = properties;\n\n  const [openLogs, setOpenLogs] = React.useState(false);\n\n  const handleClickLogs = () => {\n    setOpenLogs(false);\n    onClose();\n  };\n\n  const handleOpenLogs = () => {\n    setOpenLogs(true);\n  };\n\n\n  return (\n    <React.Fragment>\n      <MenuItem onClick={handleOpenLogs}>\n        Application Logs\n      </MenuItem>\n      <Dialog onClose={handleClickLogs} aria-labelledby=\"simple-dialog-title\" open={openLogs} fullWidth={true} maxWidth={'xs'}>\n        <DialogTitle id=\"simple-dialog-title\">\n          Application Logs\n          <Clear onClick={clear}></Clear>\n        </DialogTitle>\n        <List>\n          <Map collection={logs()} iteratee={(logrow: LogRow) =>\n            <ListItem key={logrow.id}>\n              <ListItemText primary={logrow.message || logrow} />\n            </ListItem>\n          } />\n        </List>\n      </Dialog>\n    </React.Fragment>\n  )\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport SnoozeIcon from '@material-ui/icons/Snooze';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { teal } from '@material-ui/core/colors';\nimport { UseMutationResult } from 'react-query';\n\nexport default function SensorManagmentItem(properties: { sensorMutation: UseMutationResult<any, unknown, Partial<Sensor>, unknown>, sensor: Sensor }) {\n  const { \n    sensorMutation, \n    sensor \n  } = properties;\n  const snoozedColor = teal[\"400\"];\n\n  const [isFavourite, setIsFavourite] = React.useState<boolean>(sensor.isFavourite || false);\n  const [notificationEnabled, setNotificationEnabled] = React.useState<boolean>(sensor.notificationEnabled || false);\n\n  const handleOk = () => {\n    sensorMutation.mutate({ sensorId: sensor.sensorId, isFavourite, notificationEnabled });\n  };\n\n  const handleIsFavouriteChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsFavourite(event.target.checked);\n  };\n\n  const handleNotificationsChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNotificationEnabled(event.target.checked);\n  };\n\n  const now = new Date().getTime();\n\n  const snoozeButtonColor = sensor.snoozeUntil || 0 > now\n    ? snoozedColor\n    : 'black';\n\n  return (\n    <Accordion>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"content\"\n        id=\"header\"\n      >\n        <Grid container spacing={0} alignItems=\"center\">\n          <Grid item xs={11}>\n            <ListItemText primary={sensor.name} secondary={sensor.sensorId} />\n          </Grid>\n          <Grid item xs={1}>\n            <SnoozeIcon\n              style={{ color: snoozeButtonColor }}\n            />\n          </Grid>\n        </Grid>\n      </AccordionSummary>\n      <AccordionDetails>\n        <FormGroup>\n        <FormControlLabel \n            control={<Checkbox checked={isFavourite} onChange={handleIsFavouriteChange} />} \n            label=\"Favourite\" />\n          <FormControlLabel \n            control={<Checkbox checked={notificationEnabled} onChange={handleNotificationsChange} />} \n            label=\"Notifications\" />\n\n          <Button onClick={handleOk} color=\"primary\">\n            Save\n          </Button>\n        </FormGroup>\n      </AccordionDetails>\n    </Accordion>\n  )\n}","import React, { useMemo } from 'react';\n\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport List from '@material-ui/core/List';\nimport { Map } from 'react-lodash';\n\nimport { loadSensors, updateSensor } from './service/sensors';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport _ from 'lodash';\nimport SensorManagmentItem from './SensorManagmentItem';\n\nexport default function SensorsMenuItem(properties: { onClose: () => void }) {\n  const {\n    onClose\n  } = properties;\n\n  const [openSensors, setOpenSensors] = React.useState(false);\n\n  const handleClickSensors = () => {\n    setOpenSensors(false);\n    onClose();\n  };\n\n  const handleOpenSensors = () => {\n    setOpenSensors(true);\n  };\n\n  const {\n    data: sensors = []\n  } = useQuery('loadSensors', loadSensors, { refetchInterval: 60000 });\n\n  const sortedSensors = useMemo(\n    () => _.sortBy(sensors, 'name').filter(sensor => sensor.notificationEnabled), \n    [sensors]\n  );\n  const queryClient = useQueryClient()\n\n  const mutation = useMutation(updateSensor, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('loadSensors')\n    },\n  });\n\n  return (\n    <React.Fragment>\n      <MenuItem onClick={handleOpenSensors}>\n        Sensors\n      </MenuItem>\n      <Dialog onClose={handleClickSensors} aria-labelledby=\"simple-dialog-title\" open={openSensors} fullWidth={true} maxWidth={'xs'}>\n        <DialogTitle id=\"simple-dialog-title\">\n          Sensors\n        </DialogTitle>\n        <List>\n          <Map collection={sortedSensors} iteratee={(sensor: Sensor) =>\n            <SensorManagmentItem \n              key={sensor.sensorId}\n              sensor={sensor}\n              sensorMutation={mutation}\n            />\n          } />\n        </List>\n      </Dialog>\n    </React.Fragment>\n  )\n}","import React from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport NotificationEventsMenuItem from './NotificationEventsMenuItem';\nimport ApplicationLogsMenuItem from './ApplicationLogsMenuItem';\nimport SensorsMenuItem from './SensorsMenuItem';\nimport { addLog } from './utils/applogs';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  dialog2: {\n    minWidth: \"400px\"\n  }\n}));\n\nexport default function MenuBar() {\n\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState<EventTarget & HTMLButtonElement | null>(null);\n  const open = Boolean(anchorEl);\n\n  const handleMenu = (event: { currentTarget: EventTarget & HTMLButtonElement; }) => {\n    setAnchorEl(event.currentTarget);\n    addLog('handleMenu');\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n    addLog('handleClose');\n  };\n\n  return (\n    <React.Fragment>\n      <AppBar position=\"fixed\" className={classes.root}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n            aria-controls=\"menu-appbar\"\n            aria-haspopup=\"true\"\n            onClick={handleMenu}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Menu\n            id=\"menu-appbar\"\n            anchorEl={anchorEl}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            keepMounted\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            open={open}\n            onClose={handleClose}\n          >\n            <div>\n              <NotificationEventsMenuItem onClose={handleClose} />\n            </div>\n            <div>\n              <ApplicationLogsMenuItem onClose={handleClose} />\n            </div>\n            <div>\n              <SensorsMenuItem onClose={handleClose} />\n            </div>\n          </Menu>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n    </React.Fragment>\n  )\n}","import React from 'react';\nimport SensorScreen from './SensorScreen';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport MenuBar from './MenuBar';\nimport { QueryClient, QueryClientProvider } from 'react-query'\n\nconst queryClient = new QueryClient()\n\nexport default function App() {\n\n  return (\n    <React.Fragment>\n     <QueryClientProvider client={queryClient}>\n        <CssBaseline />\n        <MenuBar />\n        <SensorScreen />\n      </QueryClientProvider>\n    </React.Fragment>\n  );\n}","import { addLog } from './utils/applogs';\n// import { updateSensor } from './service/sensors';\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swFileName = process.env.NODE_ENV === 'production' \n        ? 'service-worker.js' \n        : 'custom-sw.js'\n      const swUrl = `${process.env.PUBLIC_URL}/${swFileName}`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          addLog(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              addLog(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              addLog('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      addLog(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { addLog } from './utils/applogs';\nconst convertedVapidKey = urlBase64ToUint8Array(process.env.REACT_APP_PUBLIC_VAPID_KEY as string)\n\nfunction urlBase64ToUint8Array(base64String: string) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4)\n  // eslint-disable-next-line\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\")\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\nfunction sendSubscription(subscription: any) {\n  return fetch(`${process.env.REACT_APP_API_URL}/dev/subscription`, {\n    method: 'POST',\n    body: JSON.stringify(subscription),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    mode: 'no-cors'\n  })\n}\n\nexport function subscribeUser() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function(registration) {\n      if (!registration.pushManager) {\n        addLog('Push manager unavailable.')\n        return\n      }\n\n      registration.pushManager.getSubscription().then(function(existedSubscription) {\n        if (existedSubscription === null) {\n          addLog('No subscription detected, make a request.')\n          registration.pushManager.subscribe({\n            applicationServerKey: convertedVapidKey,\n            userVisibleOnly: true,\n          }).then(function(newSubscription) {\n            addLog('New subscription added.')\n            sendSubscription(newSubscription)\n          }).catch(function(e) {\n            if (Notification.permission !== 'granted') {\n              addLog('Permission was not granted.')\n            } else {\n              console.error('An error ocurred during the subscription process.', e)\n            }\n          })\n        } else {\n          addLog('Existed subscription detected.')\n        }\n      })\n    })\n      .catch(function(e) {\n        console.error('An error ocurred during Service Worker registration.', e)\n      })\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as subscription from './subscription';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\nsubscription.subscribeUser();\n"],"sourceRoot":""}