{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["clientId","App","useState","loading","setLoading","user","setUser","controllers","setControllers","tokenId","setTokenId","loadControllers","console","log","axios","get","process","headers","then","response","data","device","map","item","name","state","deviceId","id","className","onClick","action","stateToAction","post","setTimeout","toggle","onLogoutSuccess","onFailure","error","buttonText","onSuccess","profileObj","onRequest","onAutoLoadFinished","isSignedIn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAIMA,EAAW,2EAiHFC,MA/Gf,WAAgB,IAAD,EAEiBC,mBAAS,cAF1B,mBAENC,EAFM,KAEGC,EAFH,OAGWF,mBAAS,MAHpB,mBAGNG,EAHM,KAGAC,EAHA,OAIyBJ,mBAAS,MAJlC,mBAINK,EAJM,KAIOC,EAJP,OAKiBN,mBAAS,MAL1B,mBAKNO,EALM,KAKGC,EALH,KAOPC,EAAkB,SAACF,GACvBG,QAAQC,IAAI,kBAAmBJ,GAC/BL,EAAW,0BACXU,IAAMC,IAAN,UAAaC,wBAAb,gBAAuD,CACrDC,QAAS,CACP,mBAAoBR,KAGrBS,MAAK,SAACC,GACLX,EAAeW,EAASC,KAAKC,OAAOC,KAAI,SAAAC,GAAU,MAAO,CAAEC,KAAMD,EAAKC,KAAMC,MAAOF,EAAKE,MAAOC,SAAUH,EAAKI,QAC9GvB,QA6DN,OACE,8BACGC,EAAO,gCACN,qBAAKuB,UAAU,OAAf,iCAECrB,GACCA,EAAYe,KAAI,SAAAC,GAAI,OAClB,8BACE,yBAAQM,QAAS,kBA5Bd,SAACH,EAAUD,GACxBb,QAAQC,IAAI,SAAUJ,GACtB,IAAMqB,EAVc,SAACL,GACrB,OAAiB,IAAVA,EAAc,KAAO,MASbM,CAAcN,GAE7BX,IAAMkB,KAAN,UAAchB,wBAAd,wBAAwDc,EAAxD,YAAkEJ,GAAY,GAAI,CAChFT,QAAS,CACP,mBAAoBR,KAGrBS,MAAK,SAACC,GACLP,QAAQC,IAAI,SAAUM,GACtBc,YAAW,WACTrB,QAAQC,IAAI,eACZF,EAAgBF,KACf,QAGPG,QAAQC,IAAI,SAAUa,EAAUD,GAWCS,CAAOX,EAAKG,SAAUH,EAAKE,QAAlD,UACGF,EAAKC,KADR,OAhCQC,EAiCoBF,EAAKE,MAhC1B,IAAVA,EAAc,MAAQ,UA8BXF,EAAKG,UA/BN,IAACD,KAsCd,cAAC,eAAD,CACEzB,SAAUA,EACVmC,gBA7DoB,SAAChB,GAC3BP,QAAQC,IAAI,kBAAmBM,GAC/Bb,EAAQ,OA4DF8B,UAzDoB,SAAAC,GAC1BzB,QAAQC,IAAI,kBAAmBwB,SA2D3B,cAAC,cAAD,CACErC,SAAUA,EACVsC,WAAYnC,EACZoC,UAhFmB,SAACpB,GAC1BP,QAAQC,IAAI,iBAAkBM,GAC9Bb,EAAQa,EAASqB,YACjB9B,EAAWS,EAASV,SACpBE,EAAgBQ,EAASV,UA6EnB2B,UA1EmB,SAAAC,GACzBzB,QAAQC,IAAI,iBAAkBwB,GAC9BjC,KAyEMqC,UA7Dc,WACpBrC,EAAW,eA6DLsC,mBA1DuB,WAC7BtC,KA0DMuC,YAAY,OCnGPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e8e1b3d2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport axios from \"axios\";\n\nconst clientId = \"784246624968-hv118aoq9sne0hpn133r0b1jatucqh9g.apps.googleusercontent.com\";\n\nfunction App() {\n\n  const [loading, setLoading] = useState('Loading...');\n  const [user, setUser] = useState(null);\n  const [controllers, setControllers] = useState(null);\n  const [tokenId, setTokenId] = useState(null);\n\n  const loadControllers = (tokenId) => {\n    console.log('loadControllers', tokenId);\n    setLoading('Loading controllers...');\n    axios.get(`${process.env.REACT_APP_HOST}/controllers`, {\n      headers: {\n        'x-googleid-token': tokenId\n      }\n    })\n      .then((response) => {\n        setControllers(response.data.device.map(item => { return { name: item.name, state: item.state, deviceId: item.id }; }));\n        setLoading();\n      });\n  }\n\n  const handleLoginSuccess = (response) => {\n    console.log(\"Login Success \", response);\n    setUser(response.profileObj);\n    setTokenId(response.tokenId);\n    loadControllers(response.tokenId);\n  }\n\n  const handleLoginFailure = error => {\n    console.log(\"Login Failure \", error);\n    setLoading();\n  }\n\n  const handleLogoutSuccess = (response) => {\n    console.log(\"Logout Success \", response);\n    setUser(null);\n  }\n\n  const handleLogoutFailure = error => {\n    console.log(\"Logout Failure \", error);\n  }\n\n  const handleRequest = () => {\n    setLoading(\"Loading...\");\n  }\n\n  const handleAutoLoadFinished = () => {\n    setLoading();\n  }\n\n  const stateToAction = (state) => {\n    return state === 2 ? 'On' : 'Off';\n  }\n\n  const stateLabel = (state) => {\n    return state === 2 ? 'Off' : 'On';\n  }\n\n  const toggle = (deviceId, state) => {\n    console.log('toggle', tokenId);\n    const action = stateToAction(state);\n\n    axios.post(`${process.env.REACT_APP_HOST}/controllers/${action}/${deviceId}`, {}, {\n      headers: {\n        'x-googleid-token': tokenId\n      }\n    })\n      .then((response) => {\n        console.log('toggle', response);\n        setTimeout(function () {\n          console.log(\"Hello World\");\n          loadControllers(tokenId);\n        }, 2000);\n      });\n\n    console.log('toggle', deviceId, state);\n  }\n\n  return (\n    <div>\n      {user ? <div>\n        <div className=\"name\">Telldus Controller!</div>\n        {/* <pre>{JSON.stringify(user, null, 2)}</pre> */}\n        {controllers &&\n          controllers.map(item =>\n            <div key={item.deviceId}>\n              <button onClick={() => toggle(item.deviceId, item.state)}>\n                {item.name} - {stateLabel(item.state)}\n              </button>\n            </div>\n          )\n        }\n        <GoogleLogout\n          clientId={clientId}\n          onLogoutSuccess={handleLogoutSuccess}\n          onFailure={handleLogoutFailure}\n        />\n      </div> :\n        <GoogleLogin\n          clientId={clientId}\n          buttonText={loading}\n          onSuccess={handleLoginSuccess}\n          onFailure={handleLoginFailure}\n          onRequest={handleRequest}\n          onAutoLoadFinished={handleAutoLoadFinished}\n          isSignedIn={true}\n        />}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}